

//***********************WETLAND EXTENT TOOL GLB********************************//
/*Script: Wetland Extent Tool (2.0)                                              *           
* Authors v1.0: Erica O'Connor, Melissa Ferriter, Alice Lin, Christopher Notto   *
* Authors v2.0: Vanessa Valenti, Erica Carcelen, Nicholas Russo, Katie Lange     *                                        
* Date: April 3rd, 2020                                                          *  
* Project: Great Lakes Water Resources II                                        *   
* Node: JPL                                                                      *   
* Contact: ericacarcelen@gmail.com                                               *       
* URL:                                                                           *    
* Description: A Google Earth Engine Tool that automates wetland extent          *    
* in the entire Great Lakes Basin utilizing Sentinel 2, Sentinel 1 C-SAR,        * 
* Landsat 8, and the Shuttle Radar Topography Mission.                           *
* WET 2.0 performs the following functions                                       *
*    -Tool utilizes optical indices (NDVI, MNDWI, TCWGD) derived from            *
*      Sentinel 2 data, radar bands (VV, VH, VV/VH) from Sentinel 1 C-SAR, and   *
*      a topographic input that has three options available that the user        *
*      can choose for classification                                             *
*    -Filters datasets by user-input area and date selection                     *
*    -Trains a Random Forest classifier utilizing field data that is filtered    *
*      by the user input area                                                    *             
*    -Outputs map layers visualizing wetland classification and extent for       *
*      the user input area and datae                                             *
*    -Users can select what map layers to add, including NDVI, MNDWI, and        *
*      True Color images                                                         *
*    -Users can draw a geometry using the GEE map to select an area of           *
*      analysis, or select a pre-loaded geometry within the study area           *
*    -Outputs images are able to be exported to the user's Google Drive          *                                                     *
*    -Generate time series charts for the three optical indices, NDVI, MNDWI,    *
*      and TCWGD to observe trends of wetness and vegetation through time        *   
*                                                                                *
*  Usage: Requires a Google Earth Engine account                                 *
*                                                                                *
*  Parameters:                                                                   *    
*    -User input area of analysis and date range using tool UI                   *
*     -Check layers to display and press 'Add Images to the Map' to run tool     *
*                                                                                *
* To Use:                                                                        *
*  1. Change Topographic Input                                                   *
*  - Tool is capable of classifying using one of the three available             *
*    topographic options: Dynamic Surface Water Extent (derived from Landsat 8,  *
*    SRTM 'elevation' band, or SRTM 'slope' derived band)                        *
*  - 1. Change var training_bands @ line 663 to choose topographic input by      *
*    leaving *one* option uncommented - that is the input selected for the       *
*    training stack at line 826                                                  *
*  - 2. Change var stack_bands @ line 670 to choose the topographic input by     *
*    leaving *one* option uncommented - that is the input selected for the       *
*    classifying stack at line 826                                               *
*  - 3. Change var topographic_input at line 1211, select the topographic input to*
*    be used by leaving one option uncommented                                   *                                                      * 
*  - 4. Then Reset and Run the code to reflect the chosen topographic input      *
*   Note: (var training_bands, var stack_bands, and var topographic_input)       *
*    must all select the same input                                              *
*                                                                                *
*  2. If selecting a date before 2019, *Enable Sentinel-2 Atmospheric            *
*    Correction*                                                                 *
*  - Large backlogs in Google Earth Engine's Sentinel 2 Image Collection         *
*    for Level 2 data, which is pre-corrected/processed better than we are       *
*    able to correct                                                             *
*  - If selecting a date before 2019, change line 693 to use the                 *
*    Level 1-C collection:                                                       *
*   var s2_filtered = ee.ImageCollection(s2)                                     *
*  -If selecting a date during 2019, line 262 should be:                         *
*   var s2_filtered = ee.ImageCollection(s2_l2)                                  *
*                                                                                *
**********************************************************************************/

//STABLE INPUTS//
//Polygons on drop-down menu and Lake masks are included as imports above
//user can visualize these polygons in the Geometry Imports panel on the map
var Lake_Basins = ee.FeatureCollection("users/vvalenti/greatlakes_subbasins_2"),
    St_Lawrence_River = 
    /* color: #ff00ff */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-74.81260928373943, 45.01500247534635],
          [-74.84831485014568, 45.01500247534635],
          [-74.90873965483318, 44.991698317316384],
          [-74.93895205717693, 44.98198545363985],
          [-74.94444522123943, 44.958667866024456],
          [-74.90599307280193, 44.94894940668958],
          [-74.87852725248943, 44.93922930157453],
          [-74.85106143217693, 44.956724305819925],
          [-74.79612979155193, 44.964498151650474],
          [-74.77690371733318, 44.98392815803778],
          [-74.73570498686443, 44.987813369339705],
          [-74.66978701811443, 44.974213977735204],
          [-74.65056094389568, 44.991698317316384],
          [-74.67253360014568, 45.00723547597071],
          [-74.70274600248943, 45.01500247534635],
          [-74.72746524077068, 45.009177324561584]]]),
    Detroit_River = 
    /* color: #009999 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-83.41973509494856, 42.596027195162534],
          [-83.45269407932356, 42.561645757438605],
          [-83.49938597385481, 42.52117273791502],
          [-83.53234495822981, 42.4989013947256],
          [-83.51311888401106, 42.48269907006909],
          [-83.52135863010481, 42.46244026231356],
          [-83.53783812229231, 42.44622849481724],
          [-83.56255736057356, 42.450281830119124],
          [-83.59276976291731, 42.436094009096195],
          [-83.59276976291731, 42.419875422436355],
          [-83.62298216526106, 42.411764555545034],
          [-83.64495482151106, 42.39959628833177],
          [-83.64770140354231, 42.38133946222069],
          [-83.62023558322981, 42.38336826068683],
          [-83.58727659885481, 42.38336826068683],
          [-83.57629027072981, 42.36510671449418],
          [-83.58453001682356, 42.34277983612028],
          [-83.60375609104231, 42.32856769302867],
          [-83.62023558322981, 42.31435233821757],
          [-83.60100950901106, 42.30216519222621],
          [-83.59002318088606, 42.28591199403547],
          [-83.60375609104231, 42.26558959807502],
          [-83.57629027072981, 42.26152433248873],
          [-83.55431761447981, 42.26152433248873],
          [-83.55431761447981, 42.24526064894853],
          [-83.52685179416731, 42.24119407278258],
          [-83.48839964572981, 42.23509371708754],
          [-83.45544066135481, 42.23509371708754],
          [-83.41973509494856, 42.23509371708754],
          [-83.40874876682356, 42.216789111703996],
          [-83.41698851291731, 42.18830473236799],
          [-83.40600218479231, 42.167950885315314],
          [-83.36480345432356, 42.172022178819795],
          [-83.31811155979231, 42.16387932977125],
          [-83.28515257541731, 42.1557354325791],
          [-83.26043333713606, 42.12926052832171],
          [-83.23571409885481, 42.1068500400766],
          [-83.21099486057356, 42.08239319630732],
          [-83.19176878635481, 42.06812234895752],
          [-83.16155638401106, 42.04569024855779],
          [-83.13134398166731, 42.04976940161977],
          [-83.11211790744856, 42.07423881932386],
          [-83.09838499729231, 42.09054652544753],
          [-83.07366575901106, 42.10073671329688],
          [-83.03796019260481, 42.08035470029555],
          [-82.99950804416731, 42.07016123790045],
          [-82.96654905979231, 42.06404437461152],
          [-82.93633665744856, 42.06812234895752],
          [-82.90612425510481, 42.08035470029555],
          [-82.87591185276106, 42.09258469400351],
          [-82.83196654026106, 42.10073671329688],
          [-82.80724730197981, 42.117037608118636],
          [-82.80175413791731, 42.143517621586504],
          [-82.81823363010481, 42.16998656482274],
          [-82.85668577854231, 42.19847919912932],
          [-82.89239134494856, 42.22085726044702],
          [-82.91985716526106, 42.23712723451141],
          [-82.91436400119856, 42.263556998047484],
          [-82.90612425510481, 42.306227836386476],
          [-82.91161741916731, 42.3508996186903],
          [-82.92535032932356, 42.37525267348512],
          [-82.89513792697981, 42.38336826068683],
          [-82.87316527072981, 42.421902975249004],
          [-82.86767210666731, 42.45230839941416],
          [-82.87865843479231, 42.48067348438475],
          [-82.87591185276106, 42.50700098313283],
          [-82.87041868869856, 42.52724536334002],
          [-82.84020628635481, 42.55759963610785],
          [-82.80724730197981, 42.57175991288108],
          [-82.78252806369856, 42.56973721298096],
          [-82.84020628635481, 42.58389473477368],
          [-82.89239134494856, 42.58389473477368],
          [-82.92260374729231, 42.577827619010066],
          [-82.94732298557356, 42.58187242844929],
          [-82.92535032932356, 42.60007082383231],
          [-82.92809691135481, 42.626348014003526],
          [-82.94732298557356, 42.654634127038115],
          [-82.96380247776106, 42.68088828875156],
          [-83.00500120822981, 42.69098309059424],
          [-83.07091917697981, 42.697039184291654],
          [-83.12035765354231, 42.68694536670731],
          [-83.16155638401106, 42.676849908701776],
          [-83.20824827854231, 42.67483062025423],
          [-83.25906004612044, 42.70107625199697],
          [-83.30849852268294, 42.703094687420624],
          [-83.34969725315169, 42.6889642614594],
          [-83.38814940158919, 42.666752810321846],
          [-83.41286863987044, 42.638472208468116]]]),
    Clinton_River = 
    /* color: #999900 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-82.98068802685123, 42.926347184025175],
          [-83.01914017528873, 42.950476006864754],
          [-83.06308548778873, 42.9303693111033],
          [-83.10703080028873, 42.906232609152596],
          [-83.14548294872623, 42.89013622203748],
          [-83.18393509716373, 42.89416071274021],
          [-83.20041458935123, 42.86598376307669],
          [-83.24435990185123, 42.84987687183294],
          [-83.29929154247623, 42.86195743415135],
          [-83.33774369091373, 42.88611146872335],
          [-83.36520951122623, 42.85793084263378],
          [-83.39267533153873, 42.82570865750488],
          [-83.39816849560123, 42.79346966807743],
          [-83.44211380810123, 42.785407295218214],
          [-83.50253861278873, 42.79346966807743],
          [-83.51352494091373, 42.765246768690595],
          [-83.46957962841373, 42.73297627512541],
          [-83.44760697216373, 42.70068898148608],
          [-83.44211380810123, 42.64414579699972],
          [-83.41464798778873, 42.611812311020245],
          [-83.37070267528873, 42.5915953538323],
          [-83.31027787060123, 42.60372631535576],
          [-83.25534622997623, 42.611812311020245],
          [-83.20590775341373, 42.632022707938546],
          [-83.16196244091373, 42.640105029743964],
          [-83.18942826122623, 42.595639270072866],
          [-83.21140091747623, 42.55518830025653],
          [-83.21689408153873, 42.51471109374999],
          [-83.20041458935123, 42.46205150670455],
          [-83.15646927685123, 42.42962357395017],
          [-83.12351029247623, 42.40123536376536],
          [-83.08505814403873, 42.389065054266425],
          [-83.01914017528873, 42.39312208633633],
          [-82.99167435497623, 42.43367798351058],
          [-82.95871537060123, 42.47825917816552],
          [-82.91477005810123, 42.55518830025653],
          [-82.85434525341373, 42.64818630182008],
          [-82.83237259716373, 42.712798685264],
          [-82.79941361278873, 42.76927939905657],
          [-82.78293412060123, 42.829737349660526],
          [-82.84885208935123, 42.882086452800486],
          [-82.89829056591373, 42.93841277734167]]]),
    Milwaukee_Estuary = 
    /* color: #0000ff */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-87.85809975652056, 43.05041665998012],
          [-87.86771279362993, 43.07148731523192],
          [-87.88419228581743, 43.061454572982136],
          [-87.91303139714556, 43.05342719692876],
          [-87.91989785222368, 43.03937676019043],
          [-87.93912392644243, 43.03536175859422],
          [-87.95423012761431, 43.03134649429173],
          [-87.96246987370806, 43.024319149633016],
          [-87.95011025456743, 43.020303162901335],
          [-87.93775063542681, 43.021307184212176],
          [-87.92401772527056, 43.01729100045769],
          [-87.92401772527056, 43.009257844866724],
          [-87.92264443425493, 43.00021928884266],
          [-87.91577797917681, 42.99318838142862],
          [-87.90341836003618, 42.99720614131375],
          [-87.89929848698931, 43.004236589032544],
          [-87.88419228581743, 42.99318838142862],
          [-87.87320595769243, 42.98113352570701],
          [-87.85535317448931, 42.97008116454609]]]),
    Saginaw_Bay = 
    /* color: #bf04c2 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-93.12557815521988, 47.27181396432169],
          [-93.18050979584488, 47.204681335995275],
          [-93.19149612396988, 47.122514824155346],
          [-93.14755081146988, 47.05519314235209],
          [-93.10360549896988, 46.987786362656976],
          [-93.19149612396988, 46.927797773492735],
          [-93.19149612396988, 46.85271745343178],
          [-93.08163284271988, 46.830172861802644],
          [-92.97176956146988, 46.830172861802644],
          [-92.86190628021988, 46.815137878317834],
          [-92.78500198334488, 46.747428416854035],
          [-92.76302932709488, 46.67963379671317],
          [-92.68612503021988, 46.65701666374976],
          [-92.59823440521988, 46.7097752531982],
          [-92.56527542084488, 46.626845764837526],
          [-92.62020706146988, 46.558899721988894],
          [-92.65316604584488, 46.475738865852634],
          [-92.59823440521988, 46.40002763821735],
          [-92.51034378021988, 46.36971369072081],
          [-92.40048049896988, 46.33938290966853],
          [-92.27963088959488, 46.34696718312388],
          [-92.16976760834488, 46.377293755707456],
          [-92.10384963959488, 46.44546699843522],
          [-92.05990432709488, 46.528674136096264],
          [-91.96102737396988, 46.566453489069616],
          [-91.88412307709488, 46.64947551637092],
          [-91.88412307709488, 46.7323703055356],
          [-91.88412307709488, 46.837688776807745],
          [-91.95004104584488, 46.920294470916616],
          [-92.03793167084488, 46.98029146689315],
          [-91.98300003021988, 47.047707702791534],
          [-91.89510940521988, 47.10008371798327],
          [-91.79623245209488, 47.152408260054486],
          [-91.73031448334488, 47.22706832965635],
          [-91.60946487396988, 47.2941726064874],
          [-91.52157424896988, 47.37607345471726],
          [-91.49960159271988, 47.4652749798842],
          [-91.59847854584488, 47.45041855414262],
          [-91.70834182709488, 47.44298876710822],
          [-91.69735549896988, 47.52465870860412],
          [-91.73031448334488, 47.6062016953504],
          [-91.85116409271988, 47.576564387122815],
          [-91.92806838959488, 47.64322472955249],
          [-91.92806838959488, 47.70980011753224],
          [-92.04891799896988, 47.702407046911254],
          [-92.10384963959488, 47.76890693533916],
          [-92.24667190521988, 47.731973037943305],
          [-92.24667190521988, 47.65062618983048],
          [-92.34554885834488, 47.61360839998224],
          [-92.34554885834488, 47.539494148172054],
          [-92.49935745209488, 47.48012720801231],
          [-92.47738479584488, 47.56173943884456],
          [-92.59823440521988, 47.55432539107871],
          [-92.73007034271988, 47.539494148172054],
          [-92.87289260834488, 47.509819072182346],
          [-92.99374221771988, 47.44298876710822],
          [-93.03768753021988, 47.36119183940078]]]),
    StLouis_River = 
    /* color: #ffc82d */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-85.06710647553238, 43.9082600323804],
          [-85.17696975678238, 43.89242770207673],
          [-85.22091506928238, 43.82905628121951],
          [-85.30880569428238, 43.79734531230682],
          [-85.28683303803238, 43.73387286137631],
          [-85.20992874115738, 43.70211138096687],
          [-85.13302444428238, 43.6305864964759],
          [-85.14401077240738, 43.551014453802864],
          [-85.10006545990738, 43.47930967296215],
          [-85.01217483490738, 43.463363706834144],
          [-85.01217483490738, 43.38357077157541],
          [-84.92428420990738, 43.375585693843576],
          [-84.89132522553238, 43.31166721550635],
          [-84.77047561615738, 43.29567708085569],
          [-84.66061233490738, 43.31166721550635],
          [-84.61666702240738, 43.24768144296559],
          [-84.52877639740738, 43.263684194444124],
          [-84.44088577240738, 43.223669430809245],
          [-84.39694045990738, 43.143561060095024],
          [-84.32003616303238, 43.08742265962391],
          [-84.26510452240738, 43.01516904841207],
          [-84.18820022553238, 42.97499137526585],
          [-84.11129592865738, 42.934787435356924],
          [-84.08932327240738, 42.85430076584779],
          [-84.10030960053238, 42.77370906161431],
          [-84.05636428803238, 42.70108674176653],
          [-84.01241897553238, 42.62029553450088],
          [-83.91354202240738, 42.56367923266886],
          [-83.81466506928238, 42.61221064019084],
          [-83.70480178803238, 42.636462174089004],
          [-83.60592483490738, 42.70916008837657],
          [-83.50704788178238, 42.749511071927465],
          [-83.40817092865738, 42.80595834604822],
          [-83.30929397553238, 42.862354159726564],
          [-83.18844436615738, 42.87845779635187],
          [-83.17745803803238, 42.966952688541504],
          [-83.19943069428238, 43.0793986841536],
          [-83.11154006928238, 43.12752677226581],
          [-83.01266311615738, 43.19163869681121],
          [-83.01266311615738, 43.271683993141835],
          [-82.90279983490738, 43.31166721550635],
          [-82.88082717865738, 43.4155005660903],
          [-82.86984085053238, 43.53508742135358],
          [-82.84786819428238, 43.622634026414985],
          [-82.85885452240738, 43.71799422566456],
          [-82.93575881928238, 43.79734531230682],
          [-82.93575881928238, 43.86867131279532],
          [-82.86984085053238, 43.94782243856322],
          [-82.86984085053238, 44.042664846687025],
          [-82.97970413178238, 44.08213777743157],
          [-83.07858108490738, 44.153122728108976],
          [-83.18844436615738, 44.22402239872441],
          [-83.29830764740738, 44.294836783297875],
          [-83.38619827240738, 44.38127186931705],
          [-83.48507522553238, 44.428364574610214],
          [-83.57296585053238, 44.43620967304036],
          [-83.72677444428238, 44.44405371837347],
          [-83.86959670990738, 44.43620967304036],
          [-83.99044631928238, 44.451896710603904],
          [-84.10030960053238, 44.4989325485246],
          [-84.17721389740738, 44.45973864972609],
          [-84.24313186615738, 44.3577113003413],
          [-84.45187210053238, 44.25550598801207],
          [-84.56173538178238, 44.1925219628042],
          [-84.72653030365738, 44.10580890282886],
          [-84.88033889740738, 43.97945341694396]]]),
    Kakagon_Sloughs = 
    /* color: #ff9999 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-90.67052790266816, 46.65145328575332],
          [-90.75979181868378, 46.71175081655499],
          [-90.76940485579316, 46.70421730535158],
          [-90.7227129612619, 46.67407274599566],
          [-90.76528498274628, 46.66841876815785],
          [-90.7666582737619, 46.65805160591892],
          [-90.7611651096994, 46.64768245561717],
          [-90.77627131087128, 46.64108287029902],
          [-90.79137751204316, 46.63448247987012],
          [-90.80236384016816, 46.6278812843198],
          [-90.82296320540253, 46.621279283637485],
          [-90.83944269759003, 46.61939284984539],
          [-90.78451105696503, 46.61750635032717],
          [-90.73232599837128, 46.61656307592063],
          [-90.7007403050119, 46.61656307592063],
          [-90.66366144759003, 46.61278981397795],
          [-90.6128496800119, 46.6080728668349],
          [-90.5963701878244, 46.60995969498762]]]),
    Long_Point_National_Wildlife_Area = 
    /* color: #99ff99 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-80.21161655931083, 42.5463942065215],
          [-80.15119175462333, 42.5352640221633],
          [-80.04132847337333, 42.54538245356634],
          [-80.0509415104827, 42.55398183101117],
          [-80.08596043138114, 42.55651083420198],
          [-80.12166599778739, 42.56359149790034],
          [-80.1278458073577, 42.569154312828225],
          [-80.13951878099051, 42.56763723067977],
          [-80.15462498216239, 42.56359149790034],
          [-80.18415073899833, 42.5640972288464],
          [-80.21710972337333, 42.56965999867842],
          [-80.23084263352958, 42.56965999867842],
          [-80.2486954167327, 42.566625822082614],
          [-80.28028111009208, 42.55853396296369]]]),
    Eastern_Georgian_Bay = 
    /* color: #9999ff */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-80.85014013768539, 45.893071720386274],
          [-80.56449560643539, 45.570990889448105],
          [-80.25687841893539, 45.26252019381611],
          [-80.03715185643539, 45.03006127025329],
          [-79.86137060643539, 44.8589889082462],
          [-79.42191748143539, 44.734252445247435],
          [-79.20219091893539, 44.742056373702326],
          [-79.03739599706039, 44.83562136034114],
          [-78.94950537206039, 44.952364303611105],
          [-78.94950537206039, 45.09989848308549],
          [-78.89457373143539, 45.21610424533089],
          [-78.66386084081039, 45.31662421058343],
          [-78.60892920018539, 45.40154053840153],
          [-78.68583349706039, 45.4863294294082],
          [-78.76273779393539, 45.56329965864843],
          [-79.04838232518539, 45.67088106063021],
          [-79.16923193456039, 45.755264515096435],
          [-79.23514990331039, 45.847173888122455],
          [-79.35599951268539, 45.94657128959484],
          [-79.34501318456039, 46.076284065274166],
          [-79.42191748143539, 46.14483238236466],
          [-79.79545263768539, 46.19048389923543],
          [-80.14701513768539, 46.23609753001331],
          [-80.52055029393539, 46.129606790514394]]]),
    St_Clair_Delta = 
    /* color: #ffff99 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-81.55679647413318, 42.5563564683941],
          [-81.61172811475818, 42.814784324347485],
          [-81.63370077100818, 42.92750838002453],
          [-81.71060506788318, 43.01593283394606],
          [-81.84244100538318, 43.06411076646473],
          [-81.99624959913318, 43.01593283394606],
          [-82.12808553663318, 42.93555221989721],
          [-82.30386678663318, 42.92750838002453],
          [-82.40274373975818, 43.01593283394606],
          [-82.53457967725818, 43.07213674386193],
          [-82.58951131788318, 43.200409444256955],
          [-82.58951131788318, 43.32841303189446],
          [-82.66641561475818, 43.4481719213074],
          [-82.75430623975818, 43.535844708969044],
          [-82.74331991163318, 43.623390213728015],
          [-82.84219686475818, 43.67108865211468],
          [-82.90811483350818, 43.55973337965352],
          [-82.93008748975818, 43.40827858270147],
          [-82.97403280225818, 43.28844082387231],
          [-83.13882772413318, 43.14432324681802],
          [-83.21573202100818, 43.04805565899924],
          [-83.17178670850818, 42.92750838002453],
          [-82.98501913038318, 42.9516367479195],
          [-82.83121053663318, 42.87922328007657],
          [-82.72134725538318, 42.82284286988275],
          [-82.61148397413318, 42.75027815340036],
          [-82.55655233350818, 42.66147244012151],
          [-82.65542928663318, 42.64531229854565],
          [-82.74331991163318, 42.58871873735109],
          [-82.62247030225818, 42.5158800192838],
          [-82.45767538038318, 42.48347997165854],
          [-82.40274373975818, 42.41051848654881],
          [-82.47964803663318, 42.33747203240353],
          [-82.51260702100818, 42.25620967477327],
          [-82.53457967725818, 42.1585564497266],
          [-82.41373006788318, 42.15041186746483],
          [-82.28189413038318, 42.1585564497266],
          [-82.10611288038318, 42.223675372872506],
          [-81.97427694288318, 42.24807767193691],
          [-81.83145467725818, 42.25620967477327],
          [-81.73257772413318, 42.41862951458808],
          [-81.55679647413318, 42.54826327741309],
          [-81.62271444288318, 42.99986511668264]]]),
    geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-91.59941521739735, 47.061267036311165],
          [-91.46757927989735, 47.10989124473119],
          [-91.00066033458485, 47.47872779481092],
          [-90.51176873302235, 47.68992169624607],
          [-90.01189080333485, 47.80811333353354],
          [-89.58342400645985, 47.970188691526936],
          [-89.58342400645985, 48.010628291397566],
          [-89.91301385020985, 48.032672899166165],
          [-90.03386345958485, 48.076733835551764],
          [-90.19865838145985, 48.117089908371454],
          [-90.36894646739735, 48.09508143184592],
          [-90.55022088145985, 48.12809061271631],
          [-90.73698845958485, 48.09508143184592],
          [-90.86882439708485, 48.2416266298705],
          [-91.43462029552235, 48.04736406727451],
          [-91.56645623302235, 48.05103620470049],
          [-91.57194939708485, 48.10241863780864]]]),
    ErieLakeMask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-83.17648908932321, 42.037094535112644],
          [-83.3522703024352, 41.787737313303595],
          [-83.25300063365864, 41.71179021916938],
          [-82.87985793803728, 41.5332945584392],
          [-82.4950131980555, 41.41860105336639],
          [-82.03391048027052, 41.55385141343519],
          [-81.72079997692518, 41.533294875096196],
          [-81.34451818251122, 41.75906046321748],
          [-80.93441887083921, 41.899485205690866],
          [-80.4257396042188, 42.04233088936034],
          [-79.9355207252921, 42.26108977156778],
          [-79.68170544753653, 42.34849148641712],
          [-79.40954892069306, 42.5121792262446],
          [-79.20240011093873, 42.5862536605931],
          [-78.89593894372703, 42.81458456725179],
          [-78.89471464151539, 42.86132802735243],
          [-78.9167746921323, 42.8756399341921],
          [-78.96488782267589, 42.87624616363727],
          [-79.03496132313303, 42.86072672434662],
          [-79.07101657662702, 42.85244318376502],
          [-79.07753138852672, 42.8355910466037],
          [-79.09914513764053, 42.82679234133257],
          [-79.12592199486127, 42.850422182124056],
          [-79.16130039553322, 42.86373067740774],
          [-79.23514199734637, 42.86292021023029],
          [-79.29978529739775, 42.86911091011012],
          [-79.32048540667819, 42.8662348271221],
          [-79.34264701889853, 42.84638169066317],
          [-79.4364264382603, 42.86702391910159],
          [-79.47941739133445, 42.831249344554514],
          [-79.52376266341247, 42.849832783915794],
          [-79.54312802178214, 42.837633943252484],
          [-79.58720835860352, 42.8485857131335],
          [-79.63439070415566, 42.825875908391595],
          [-79.69862342821894, 42.851841338168825],
          [-79.78586558278475, 42.83512975718126],
          [-79.86136377592695, 42.81559194612269],
          [-79.90877038468018, 42.81377089051809],
          [-79.96715673986584, 42.803865708027296],
          [-79.98089869259273, 42.784018806159544],
          [-80.01658088578537, 42.7993616539957],
          [-80.04594273526672, 42.78869696866527],
          [-80.10001351199325, 42.78406384629397],
          [-80.16420571352312, 42.779807415517645],
          [-80.22116596118556, 42.77528417175442],
          [-80.25829075092902, 42.747809783071034],
          [-80.27067538762255, 42.72738470688349],
          [-80.30431639936992, 42.703413503093344],
          [-80.31872049515837, 42.68246288485492],
          [-80.31525967293787, 42.65368919393565],
          [-80.29944304550708, 42.63804036562868],
          [-80.26658018135078, 42.607517329811515],
          [-80.15823486207148, 42.59110794569765],
          [-80.09815955946803, 42.566338380456976],
          [-80.01105177284735, 42.551097497252776],
          [-80.12711865233095, 42.53097529201092],
          [-80.35712128829985, 42.54603891402299],
          [-80.61255355394303, 42.56627063018382],
          [-80.8583727872625, 42.638040308968634],
          [-81.06711312975787, 42.633999121575464],
          [-81.29645284672692, 42.622884538131224],
          [-81.3941656798623, 42.59571055194809],
          [-81.50693997744018, 42.56136243049076],
          [-81.80045086136654, 42.37684772425785],
          [-81.81967693720763, 42.336255063117974],
          [-81.81834457178005, 42.28446139809734],
          [-81.84714275173835, 42.23872571254184],
          [-81.98170684998334, 42.25605381680439],
          [-82.07785576150253, 42.24279242383113],
          [-82.14053998078043, 42.20375457050297],
          [-82.26898993472832, 42.15440533638721],
          [-82.37534387837013, 42.11922312797407],
          [-82.42117865560945, 42.075841267707816],
          [-82.45969075485976, 42.04521428607222],
          [-82.46796355408911, 41.99826478521339],
          [-82.50357611959602, 41.89413989115324],
          [-82.57555391496248, 41.9901461909522],
          [-82.63118304761632, 42.02077891682014],
          [-82.70133015331187, 42.02077314614732],
          [-82.76176467219837, 42.001449126591666],
          [-82.86887173275818, 41.97790939033897],
          [-82.92378360725925, 41.96977641701703],
          [-82.99243214297375, 42.00448831619925],
          [-83.05563941456693, 42.01873262740653]]]),
    OntarioLakeMask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-76.78559259834307, 43.69854565077668],
          [-76.51093439521807, 43.853233048185864],
          [-76.39557794990557, 44.05096478509336],
          [-76.50544123115557, 44.07464838227282],
          [-76.54389337959307, 44.141700453559444],
          [-76.58234552803057, 44.1732280490858],
          [-76.69220880928057, 44.07464838227282],
          [-76.80756525459307, 44.07464838227282],
          [-76.95038752021807, 43.96799758496119],
          [-76.73615412178057, 43.96404387111471],
          [-77.18110041084307, 43.81360776095184],
          [-77.31842951240557, 43.88491433381536],
          [-77.38984064521807, 43.92053565099094],
          [-77.55463556709307, 43.88095509403699],
          [-77.64252619209307, 43.979857147568914],
          [-77.92817072334307, 43.940316061867],
          [-78.19733576240557, 43.9244922594483],
          [-78.64228205146807, 43.861154948308],
          [-78.93341974678057, 43.81360776095184],
          [-79.10920099678057, 43.76602268727921],
          [-79.26850275459307, 43.65484352817609],
          [-79.26850275459307, 43.5912199894643],
          [-79.38385919990557, 43.57132382541183],
          [-79.45527033271807, 43.59519843326124],
          [-79.76288752021807, 43.30807834690309],
          [-79.71894220771807, 43.260092493760546],
          [-79.44428400459307, 43.212068791703615],
          [-79.32892755928057, 43.20005695275246],
          [-79.23014533003979, 43.274129683774134],
          [-79.09821466865557, 43.30008333327221]]]),
    HuronLakeMask = 
    /* color: #ffc82d */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[-82.41558702839326, 43.08962828494795],
           [-82.36065538776826, 43.05552035910416],
           [-82.18487413776826, 43.10366720754802],
           [-82.07775743854951, 43.19984739292788],
           [-82.06402452839326, 43.269883348726374],
           [-81.96514757526826, 43.25788290142487],
           [-81.79211290729951, 43.39175360505197],
           [-81.81683214558076, 43.71422165550784],
           [-81.75915392292451, 43.95395148351702],
           [-81.78936632526826, 44.080361290176235],
           [-81.62731798542451, 44.257669097267815],
           [-81.64654405964326, 44.350051307458564],
           [-81.45702989948701, 44.45797353928578],
           [-81.32244737995576, 44.626325597153794],
           [-81.39111193073701, 44.88572535118303],
           [-81.61083849323701, 45.089692081720486],
           [-81.77837999714326, 45.209788772764576],
           [-81.81133898151826, 45.329632415392965],
           [-81.72894152058076, 45.35858882957725],
           [-81.64654405964326, 45.292933028633236],
           [-81.38012560261201, 45.27747354586927],
           [-81.21807726276826, 45.250409313472844],
           [-81.13567980183076, 45.037312814161446],
           [-80.92419298542451, 44.99071317650404],
           [-80.81982286823701, 44.75129488889796],
           [-80.64678820026826, 44.75324539467429],
           [-80.50121935261201, 44.65173180621847],
           [-80.39684923542451, 44.58134889858681],
           [-80.10296495808076, 44.51088068272606],
           [-80.02056749714326, 44.661500462906],
           [-80.30621202839326, 44.81562682167591],
           [-80.28698595417451, 44.936299007390694],
           [-80.18807971475407, 44.96454038645054],
           [-80.07824571979951, 44.91879777785259],
           [-80.12219103229951, 45.02566645963711],
           [-80.20153229757261, 45.12852790828112],
           [-80.30895861042451, 45.25451795089484],
           [-80.44079454792451, 45.39741526276446],
           [-80.55877272344804, 45.47064767801246],
           [-80.62206896198701, 45.551493362954744],
           [-80.75706071373217, 45.72844809078334],
           [-80.83671159263842, 45.77444382504954],
           [-80.96580094810717, 45.78019062660547],
           [-81.04270524498217, 45.86249636750357],
           [-81.22672624107592, 45.85293218385238],
           [-81.38602799888842, 45.8969138078613],
           [-81.39152116295092, 45.83953956304726],
           [-81.54532975670092, 45.74953417431088],
           [-81.60026139732592, 45.61713523384403],
           [-81.53434342857592, 45.520998171987394],
           [-81.80625504966967, 45.376484043311315],
           [-81.93534440513842, 45.38805879915373],
           [-82.04520768638842, 45.50945066694014],
           [-82.34458512779467, 45.61521410513796],
           [-82.74558610435717, 45.71310775575498],
           [-82.82798356529467, 45.549856567926824],
           [-82.96531266685717, 45.555626469987615],
           [-83.06693620201342, 45.787852107384055],
           [-83.54842238729935, 45.800812788288276],
           [-84.19090580482307, 45.944986074326216],
           [-84.33372807044807, 45.878101640994636],
           [-84.25682377357307, 45.7287549135114],
           [-83.65806889076057, 45.45969239400375],
           [-83.25349494030023, 45.298986328774085],
           [-83.18757697155023, 45.06279660109235],
           [-82.3415290091847, 43.884474203887116]]],
         [[[-83.37176623501517, 46.06412136372494],
           [-82.86635151812598, 46.041246135526094],
           [-82.74823998165157, 45.97351883749189],
           [-82.6315154079571, 45.99411853303698],
           [-82.52024813545326, 45.96301905619861],
           [-82.28406279334511, 46.00258512509514],
           [-82.3457634386336, 46.11103245400572],
           [-82.48454056639862, 46.104127747651454],
           [-82.79904884814032, 46.137448395608146],
           [-83.08747036942744, 46.14030243849488],
           [-83.36077911080156, 46.170747974450755]]]]),
    SuperiorLakeMask = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-84.78516607724671, 46.47070715972903],
          [-84.69452899980949, 46.50852677645237],
          [-84.65058374810816, 46.508526778873936],
          [-84.58741245812588, 46.58597478086015],
          [-84.60389195082529, 46.78005184493616],
          [-84.55445355351866, 46.862746051088756],
          [-84.84009769639523, 46.96968352579637],
          [-84.76594010183675, 47.110065667997375],
          [-84.65607699779972, 47.292941817869576],
          [-84.75770039705972, 47.36740400586629],
          [-84.97193349687264, 47.432472304879646],
          [-84.96094719450141, 47.52714228477096],
          [-85.07630348222628, 47.6049777210283],
          [-85.00489246020362, 47.682412920177384],
          [-85.01587877576495, 47.71383823205837],
          [-84.93897459790261, 47.78770543963789],
          [-84.96918696462706, 47.86331052670083],
          [-84.88953620786334, 47.92224287154661],
          [-85.32624211596688, 47.92408340684856],
          [-85.50202310719123, 47.88541799164288],
          [-85.72174935267064, 47.91672077979166],
          [-85.72724250177836, 47.81537858123798],
          [-85.57618070460487, 47.758171112794464],
          [-85.57892728098115, 47.73600937914965],
          [-85.77942747563658, 47.6768652806711],
          [-86.01563319224385, 47.72492496091943],
          [-85.94422216546218, 47.77478620956448],
          [-85.74646854801078, 47.81353416105135],
          [-85.74921513303919, 47.91672077894716],
          [-86.0479764624536, 48.061526917651214],
          [-86.20887938371493, 48.30721682109795],
          [-86.32972882515915, 48.5714226898521],
          [-86.44233852548052, 48.71116672488457],
          [-86.60164004400777, 48.67127936004773],
          [-86.77192787633054, 48.71841557440948],
          [-86.90651019460381, 48.7310985533903],
          [-86.93122939493878, 48.607757059079425],
          [-87.06870805130174, 48.59504299927164],
          [-87.13462592144926, 48.7256633820159],
          [-87.59879759023057, 48.71841557647041],
          [-87.90092116155836, 48.72022763120666],
          [-88.35747783565662, 48.445868515133775],
          [-88.43499683294874, 48.3948302487338],
          [-88.61077782895053, 48.32000317844632],
          [-88.99255218455656, 48.15536311786434],
          [-88.9129014319541, 48.05448884527642],
          [-88.39379817351333, 48.24689521485511],
          [-88.38555844436618, 48.17551419486033],
          [-88.54760655679752, 48.037963283089226],
          [-88.82775753050778, 47.86320350770416],
          [-89.07494956190149, 47.79128888957387],
          [-89.29742237902416, 47.83924305736652],
          [-89.33587446153915, 47.927657473665185],
          [-88.92663432239499, 48.05081695999487],
          [-89.0200179651511, 48.14986599063441],
          [-89.79455300230696, 47.86688880107546],
          [-90.62401961751047, 47.61939805720338],
          [-90.91515692319157, 47.47108127869022],
          [-91.35735606485302, 47.16011709309793],
          [-91.98906912560419, 46.80597912620344],
          [-92.03301438594907, 46.768366926458405],
          [-91.93413758163113, 46.72131469963401],
          [-91.55510977435225, 46.78529561926156],
          [-91.10526598895541, 46.92163789986611],
          [-91.02776669667881, 47.027356061209495],
          [-90.3449894013913, 47.10128399236338],
          [-90.4327688408616, 46.83755727224855],
          [-90.7835611181937, 46.6854944538083],
          [-90.43211692871984, 46.6367223812524],
          [-90.10351068900967, 46.71869176670607],
          [-89.90716290438205, 46.828532771987724],
          [-89.4064274908481, 46.91839212589418],
          [-89.01429480010015, 47.05915389817893],
          [-88.60528470907684, 47.30744733023777],
          [-88.14711397196928, 47.51618320571092],
          [-87.76500951080061, 47.523039399268114],
          [-87.64650255071031, 47.375463476315744],
          [-87.93269734089012, 47.28039289506812],
          [-88.19538030618615, 47.13474629321028],
          [-88.3016213305867, 46.99293226235998],
          [-87.94527276129028, 46.964828511020315],
          [-87.63037097646836, 46.89446077923255],
          [-87.26804279378852, 46.54553462098053],
          [-86.98569498941613, 46.61484075071829],
          [-86.840593446474, 46.5274694748279],
          [-86.67529668573592, 46.63544710612698],
          [-86.48776769620565, 46.607283053977376],
          [-86.02703734476816, 46.73258872153127],
          [-85.72361279591885, 46.73966821190722],
          [-84.9590758732644, 46.801070909522146],
          [-84.87667852751605, 46.80107091359952]]]);

//Inputs below are additional assets needed for the tool
var oh_nwi = ee.FeatureCollection("users/vvalenti/OH_Wetlands"),
    MI_wetlands = ee.FeatureCollection("users/vvalenti/MI_Wetlands"),
    WI_south_wetlands = ee.FeatureCollection("users/vvalenti/WI_Wetlands_South"),
    NY_wetlands = ee.FeatureCollection("users/vvalenti/NY_Wetlands"),
    WI_north_wetlands = ee.FeatureCollection("users/vvalenti/WI_Wetlands_North"),
    MN_northeast_wetlands = ee.FeatureCollection("users/vvalenti/MN_Wetlands_North_E"),
    newfield_erie_18 = ee.FeatureCollection("users/vvalenti/NewFieldData_erie_18"),
    MN_centraleast_wetlands = ee.FeatureCollection("users/vvalenti/MN_Wetlands_Central_East");
          


//////////////////////
//Ancillary Datasets//
//////////////////////

//North American Land Change Monitoring System, 2015 at 30m
var NALCMS15 = ee.Image('users/ericacarcelen/NA_NALCMS_2015_LC_30m_LAEA_mmu5pix_');
//USDA NAAS Cropland Data Layers 
var USDA = ee.ImageCollection('USDA/NASS/CDL');
print(USDA, 'USDA NAAS');
//Canada Annual Crop Inventory
var AAFC = ee.ImageCollection('AAFC/ACI');
//USGS SRTM 
var srtm = ee.Image("USGS/SRTMGL1_003");
//USGS NED
var ned = ee.Image("USGS/NED");
//JRC
var jrc = ee.Image("JRC/GSW1_2/GlobalSurfaceWater");

//ALL GEOMETRIES
//Feature collection of selectable inputs that are used in the setAreaOfInterest function
var roi_feature = ee.FeatureCollection([
  Lake_Basins,
  StLouis_River, 
  Saginaw_Bay, 
  Milwaukee_Estuary, 
  Clinton_River,
  Detroit_River,
  St_Lawrence_River,
  Kakagon_Sloughs,
  Long_Point_National_Wildlife_Area,
  Eastern_Georgian_Bay,
  St_Clair_Delta]);

//All ROI's Name's that appear for selection in drop down menu 
var all_roi = ['Draw your own geometry','Great Lakes','Lake Huron','Lake Ontario','Lake Michigan','Lake Erie','Lake Superior'
 ,'St. Louis River', 'Saginaw Bay', 'St. Clair Delta', 'Milwaukee Estuary','Clinton River','Detroit River', 'St. Lawrence River','Kakagon Sloughs','Long Point National Wildlife Area','Eastern Georgian Bay' ];

//// palettes //// 
var paletteNDVI = ['FFDEAD', '006400'];
var paletteNDWI = ['FFE333' ,'3368FF'];
var paletteLC = [
  'FFD27F', // upland
             '2967D1', // open water
             '55B600', // inundated wetland
  ];

//// visParams  ////
var trueColor = {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3, gamma: 1.4};
var NDVIvisParams = {bands: "NDVI", min: 0, max: 1, palette: paletteNDVI};
var NDWIvisParams = {bands: "MNDWI", min: -1, max: 0.5, palette: paletteNDWI};
var LCvisParams = {bands: "LandClassification", min: 1, max: 3, palette: paletteLC};

// DSWE output visualization parameters
var dswe_vis = {
  min: 0,
  max: 5,
  palette:['#FFFFFF','#F5DEB3','#0000CD','#FFA500','#00FFFF','#DC143C']
};


var wetland_class_viz = {
  min: 0, 
  max: 3, 
  palette:[
  '#FFD27F', // upland
             '#2967D1', // open water
             '#55B600', // inundated wetland
  '#247300'//forested wetland
  ]
};

//Paint the outlines of the GLB Watershed basins for reference of the GLB included in the tools 
var empty = ee.Image().byte();

//Get outlines from the GLB basins variable
var outlines = empty.paint({
  featureCollection: Lake_Basins,
  color: 'ShapeID',
  width: 2.5
});

//Add map layer of GLB watershed basin boundaries
Map.addLayer(outlines, {palette: 'DarkGreen'}, 'Great Lakes Basin Lake Watersheds', true, 0.8);
Map.centerObject(Lake_Basins, 5);

//Function to setAreaOfInterest according to the user input
function setAreaOfInterest(aoi){
  var areaInput; 
  if (aoi == 'Draw your own geometry'){
    areaInput = ee.Geometry(geometry);
   }
  else if (aoi == 'Great Lakes'){
      areaInput = Lake_Basins.geometry();
  }
  else if (aoi == 'Lake Huron'){
      areaInput = Lake_Basins.filter(ee.Filter.eq('merge', 'lk_huron')).geometry();
  }
  else if (aoi == 'Lake Michigan'){
      areaInput = Lake_Basins.filter(ee.Filter.eq('merge', 'lk_mich')).geometry();
  }
  else if (aoi == 'Lake Erie'){
      areaInput = Lake_Basins.filter(ee.Filter.eq('merge', 'lk_erie')).geometry();
  }
  else if (aoi == 'Lake Superior'){
      areaInput = Lake_Basins.filter(ee.Filter.eq('merge', 'lk_sup')).geometry();
  }
  else if (aoi == 'Lake Ontario'){
      areaInput = Lake_Basins.filter(ee.Filter.eq('merge', 'lk_ont')).geometry();
  }
  else if (aoi == 'St. Louis River'){
      areaInput = ee.Geometry(StLouis_River);
  }
  else if (aoi == 'Saginaw Bay'){
      areaInput = ee.Geometry(Saginaw_Bay);
  }
  else if (aoi == 'Milwaukee Estuary'){
      areaInput = ee.Geometry(Milwaukee_Estuary);
  }
  else if (aoi == 'Clinton River'){
      areaInput = ee.Geometry(Clinton_River);
  }
  else if (aoi == 'Detroit River'){
      areaInput = ee.Geometry(Detroit_River);
  }
  else if (aoi == 'Kakagon Sloughs'){
      areaInput = ee.Geometry(Kakagon_Sloughs);
  }
  else if (aoi == 'Long Point National Wildlife Area'){
      areaInput = ee.Geometry(Long_Point_National_Wildlife_Area);
  }
  else if (aoi == 'Eastern Georgian Bay'){
      areaInput = ee.Geometry(Eastern_Georgian_Bay);
  }
  else if (aoi == 'St. Clair Delta'){
      areaInput = ee.Geometry(St_Clair_Delta);
  }
  else if (aoi == 'St. Lawrence River'){
      areaInput = ee.Geometry(St_Lawrence_River);
  }
  return areaInput;
   }

//Function to execute analysis based in user-inputs 
function createAnalysisIC(startDayInput, endDayInput, userselectarea){
  
  //Set area of interest to areaInput variable, based on user selected area
  var areaInput = setAreaOfInterest(userselectarea);

  //Define start/end as start/end
  var start = startDayInput;
  var end = endDayInput;

  // Bands
     var l8_bands = ee.List(['TCWGD','MNDWI','NDVI']);
     var s2_bands = ee.List(['TCWGD','MNDWI','NDVI']);
     var s2_bands_pre = ee.List(['B2', 'B3', 'B4', 'B8', 'B11', 'B12', 'QA60'])
     var s1_bands = ee.List(['VV','VH', 'VV/VH']);
     var ancillary = ee.List(['DSWE']);
     
     //-----Topographic Input----//
     //Change whether to use DSWE, SRTM 'elevation', or SRTM 'slope' as topographic input.
     //Used to rename the bands at line (---) as the band names between the training stack and classification stack MUST be the same
     //Training stack bands
     var training_bands = ee.List(['s2TCWGD', 's2MNDWI', 's2NDVI', 'ratio', 'VV', 'VH'
      //,'DSWE' 
      ,'elevation'
      //, 'slope'
      ]);
    
    //Classification stack bands
     var stack_bands = ee.List(['TCWGD', 'MNDWI', 'NDVI', 'VV/VH', 'VV', 'VH'
     //,'DSWE'
     ,'elevation'
     //,'slope'
     ]);

  //define function to create image collection for time specified inputs
    function filterbyDateArea(start, end, areaInput){
    var l8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR'); //0
    var s2 = ee.ImageCollection('COPERNICUS/S2'); //1
    var s1 = ee.ImageCollection('COPERNICUS/S1_GRD'); //2
    var s2_l2 = ee.ImageCollection('COPERNICUS/S2_SR') //3

    //Define the bandnames 
    var l8bandNames = ee.Image(l8.first()).bandNames();
    var s2bandNames = ee.Image(s2.first()).bandNames();
    var s1bandNames = ee.Image(s1.first()).bandNames();
    
      //Filter each collection by areaInput and start, end
      var l8_filtered = ee.ImageCollection(l8)
        .filterBounds(areaInput)
        .filterDate(start, end)
        
      var s2_filtered = ee.ImageCollection(s2_l2)
       .filterMetadata('CLOUDY_PIXEL_PERCENTAGE', 'less_than', 18)
       .filterBounds(areaInput)
       .filterDate(start, end)
       .select(s2_bands_pre);
       
      var s1_filtered = ee.ImageCollection(s1)
        .filter(ee.Filter.eq('instrumentMode', 'IW'))
        .filterBounds(areaInput)
        .filterDate(start, end)
        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
        .select('VV', 'VH');
        
  //Return filtered collections w/ respective index 
  return [l8_filtered, //0
           s2_filtered, //1
           s1_filtered]} //2
  
  //run the function that creates the filtered image collection
  var filteredCollections = filterbyDateArea(start, end, areaInput);

  //Define each individual filtered sensor collections by accessing their index in filteredCollections 
    var l8_filteredCollection = filteredCollections[0];
    var s2_filteredCollection = filteredCollections[1];
    var s1_filteredCollection = filteredCollections[2];

 //------------------------FUNCTIONS TO MAP ONTO IMAGE COLLECTION-----------------------//
  
    /////////////////////////
    //Sentinel 1 Functions //
    ////////////////////////
    // Create function to convert to natural values.
        function toNatural(image) {
          return ee.Image(10.0).pow(image.divide(10.0));
        }
        
        // Create functions to remove dark borders, threshold value depends on VV or VH.
        // Thresholds were chosen based on trial an error and are different depending on bands.
        // Spot check if area of interest changes significantly.
        
        function removeBordersVV(image) {
          var vv = image.select('VV');
          var vv_edge = vv.lt(0.005); // Can change this threshold if needed
          var vv_maskedImage = vv.mask().and(vv_edge.not());
          return image.addBands(vv.updateMask(vv_maskedImage),['VV'],true);
        }
        function removeBordersVH(image) {
          var vh = image.select('VH');
          var vh_edge = vh.lt(0.0008); // Can change this threshold if needed
          var vh_maskedImage = vh.mask().and(vh_edge.not());
          return image.addBands(vh.updateMask(vh_maskedImage),['VH'],true);
        }
        
        // Function to add VV/VH band to each image in the collection.
        function bandRatio(image){
          var vv = image.select('VV');
          var vh = image.select('VH');
          var ratio = vv.divide(vh).rename('VV/VH');
          return image.addBands(ratio);
        }
      
      ///////////////////////
      //Landsat 8 Functions //
      ///////////////////////
      // Function to add NDVI band to each image in the collection.
          var addNDVI = function(image){
            var NDVI = image.normalizedDifference(['B5', 'B4']).rename('NDVI');
            return image.addBands(NDVI);
          };
          
          // Function to add MNDWI band to each image in the collection.
          var addMNDWI = function(image){
            var MNDWI = image.normalizedDifference(['B3', 'B6']).rename('MNDWI');
            return image.addBands(MNDWI);
          };
          
          // Function to add Tasseled Cap Wetness Greenness Difference to each image in collection
          var addTCWGD = function(image){
            var TCW = image.expression(
              '(0.1511*BLUE)+(0.1973*GREEN)+(0.3283*RED)+(0.3407*NIR)+(-0.7117*SWIR1)+(-0.4559*SWIR2)',{
                'BLUE': image.select('B2'),
                'GREEN': image.select('B3'),
                'RED': image.select('B4'),
                'NIR': image.select('B5'),
                'SWIR1': image.select('B6'),
                'SWIR2': image.select('B7')
              })
          
            var TCG = image.expression(
                '(-0.2941*BLUE)+(-0.243*GREEN)+(-0.5424*RED)+(0.7276*NIR)+(0.0713*SWIR1)+(-0.1608*SWIR2)',{
                  'BLUE': image.select('B2'),
                  'GREEN': image.select('B3'),
                  'RED': image.select('B4'),
                  'NIR': image.select('B5'),
                  'SWIR1': image.select('B6'),
                  'SWIR2': image.select('B7')
                });
            var TCWGD = TCW.subtract(TCG).rename('TCWGD');
            return image.addBands(TCWGD);
          };
        //Landsat 8 Cloud Mask 
          //cloud-score//
          //Compute a cloud free composite with L8 by selecting the least cloudy pixel 
          var cloudScoreLandsat = function(img) {
            // A helper to apply an expression and linearly rescale the output.
            var rescale = function(img, exp, thresholds) {
            return img.expression(exp, {img: img})
              .subtract(thresholds[0]).divide(thresholds[1] - thresholds[0]);
            };
            
            // Compute several indicators of cloudiness and take the minimum of them.
            var score = ee.Image(1.0);
            
            // Clouds are reasonably bright in the blue band.
            score = score.min(rescale(img, 'img.blue', [0.1, 0.3]));
            
            // Clouds are reasonably bright in all visible bands.
            score = score.min(rescale(img, 'img.red + img.green + img.blue', [0.2, 0.8]));
            
            // Clouds are reasonably bright in all infrared bands.
            score = score.min(
            rescale(img, 'img.nir + img.swir1 + img.swir2', [0.3, 0.8]));
            
            // Clouds are reasonably cool in temperature.
            score = score.min(rescale(img, 'img.temp', [300, 290]));
            
            // However, clouds are not snow.
            var ndsi = img.normalizedDifference(['green', 'swir1']);
            return score.min(rescale(ndsi, 'img', [0.8, 0.6]));
          };
        //Landsat 8 Cloud mask using bits 3 and 5 of the QA band 
        var cloudMask = function(image){
          var cloudShadowBitMask = 1 << 3;
          var cloudsBitMask = 1 << 5;
          var qa = image.select('pixel_qa');
          var qa_mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
              .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
          return image.updateMask(qa_mask);
        };
          
      ////////////////////////  
      //Sentinel 2 Functions//
      ////////////////////////
        // Function to add NDVI band to each image in the collection.
        var s2addNDVI = function(image){
          var NDVI = image.normalizedDifference(['B8', 'B4']).rename('NDVI');
          return image.addBands(NDVI).set('system:time_start', image.get('system:time_start'));
        };
        
        // Function to add MNDWI band to each image in the collection.
        var s2addMNDWI = function(image){
          var MNDWI = image.normalizedDifference(['B3', 'B11']).rename('MNDWI');
          return image.addBands(MNDWI).set('system:time_start', image.get('system:time_start'));
        };
        
        // Function to add Tasseled Cap Wetness Greenness Difference to each image in collection
        var s2addTCWGD = function(image){
          var TCW = image.expression(
            '(0.2578*BLUE)+(0.2305*GREEN)+(0.0883*RED)+(0.1071*NIR)+(-0.7611*SWIR1)+(-0.5308*SWIR2)',{
              'BLUE': image.select('B2'),
              'GREEN': image.select('B3'),
              'RED': image.select('B4'),
              'NIR': image.select('B8'),
              'SWIR1': image.select('B11'),
              'SWIR2': image.select('B12')
            })
        
          var TCG = image.expression(
              '(-0.3599*BLUE)+(-0.3533*GREEN)+(-0.4734*RED)+(0.6633*NIR)+(0.0087*SWIR1)+(-0.2856*SWIR2)',{
                'BLUE': image.select('B2'),
                'GREEN': image.select('B3'),
                'RED': image.select('B4'),
                'NIR': image.select('B8'),
                'SWIR1': image.select('B11'),
                'SWIR2': image.select('B12')
              })
          var TCWGD = TCW.subtract(TCG).rename('TCWGD');
          return image.addBands(TCWGD).set('system:time_start', image.get('system:time_start'));
        };
        
      // Mask clouds using bits 10 and 11 of the QA60 band 
        var s2cloudMask = function(image) {
          var cloudBitMask = 1 << 10;
          var cirrusBitMask = 1 << 11;
          var qa = image.select('QA60');
          var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
              .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
          return image.updateMask(mask).divide(10000).set('system:time_start', image.get('system:time_start')).set('SOLAR_IRRADIANCE_B2', image.get('SOLAR_IRRADIANCE_B2')).set('SOLAR_IRRADIANCE_B3', image.get('SOLAR_IRRADIANCE_B3')).set('SOLAR_IRRADIANCE_B4', image.get('SOLAR_IRRADIANCE_B4')).set('SOLAR_IRRADIANCE_B8', image.get('SOLAR_IRRADIANCE_B8')).set('SOLAR_IRRADIANCE_B11', image.get('SOLAR_IRRADIANCE_B11')).set('SOLAR_IRRADIANCE_B12', image.get('SOLAR_IRRADIANCE_B12'));
        };
    
    ///////////////////Dynamic Surface Water Extent Calculation/////////////////////
    ////////////////////////Developed by Jones, J. (2019)///////////////////////////
    
    //---------------------------DSWE FUNCTION-----------------------------//
    var addDSWE = function(image, dem){
      // define function to add index as band to each image in collection
      var addNDVI = function(image) {
        var ndvi = image.normalizedDifference(['B5','B4']).rename('NDVI')
        return image.addBands(ndvi);
      };
      var addMNDWI = function(image){
        var mndwi = image. normalizedDifference(['B3','B6']).rename('MNDWI')
        return image.addBands(mndwi);
      };
      var addMBSRV = function(image){
        var mbsrv = image.select('B3').add(image.select('B4')).rename('MBSRV')
        return image.addBands(mbsrv);
      };
      var addMBSRN = function(image){
        var mbsrn= image.select('B5').add(image.select('B6')).rename('MBSRN')
        return image.addBands(mbsrn);
      };
      var addAWESH = function(image) {
      var awesh = (image
        .expression('Blue + (2.5 * Green) - (1.5 * mbsrn) - (0.25 * Swir2)', {
          'Blue': image.select(['B2']),
          'Green': image.select(['B3']),
          'mbsrn': addMBSRN(image).select(['MBSRN']),
          'Swir2': image.select(['B7']) })
          .rename('AWESH')
          );
        return image.addBands(awesh);
      };
      
      var dswe_indices = image.map(addNDVI)
                          .map(addMNDWI)
                          .map(addMBSRV)
                          .map(addMBSRN)
                          .map(addAWESH);
                          
      //calculate mean composite for each band
      //output stack containing only the indices/bands needed for dswe
      var dswe_inputs = dswe_indices.mean()
                                .select(['MNDWI','MBSRV','MBSRN',
                                         'AWESH','NDVI','B2',
                                         'B5','B6','B7']);
                                         
      //define variables
      var mndwi = dswe_inputs.select('MNDWI'),
          mbsrv = dswe_inputs.select('MBSRV'),
          mbsrn = dswe_inputs.select('MBSRN'),
          awesh = dswe_inputs.select('AWESH'),
          ndvi = dswe_inputs.select('NDVI'),
          swir1 = dswe_inputs.select('B6'),
          nir = dswe_inputs.select('B5'),
          blue = dswe_inputs.select('B2'),
          swir2 = dswe_inputs.select('B7'),
          slope = ee.Terrain.slope(dem),
          hillshade = ee.Terrain.hillshade(dem); 
    
      // define thresholds for each test
      var t1_thresh = mndwi.gt(0.124).rename('Test_1');
      var t2_thresh = mbsrv.gt(mbsrn).rename('Test_2');
      var t3_thresh = awesh.gt(0).rename('Test_3');
      var t4_thresh = mndwi.gt(-0.44)
                           .and(swir1.lt(900))
                           .and(nir.lt(1500))
                           .and(ndvi.lt(0.7))
                           .rename('Test_4');
      var t5_thresh = mndwi.gt(-0.5)
                           .and(blue.lt(1000))
                           .and(swir1.lt(3000))
                           .and(swir2.lt(1000))
                           .and(nir.lt(2500))
                           .rename('Test_5'); 
                           
      //multiply booleans from test thresholds and add to create pixel values
      var tests = t1_thresh                        //test 1 true = 1
                  .add(t2_thresh.multiply(10))     //test 2 true = 10
                  .add(t3_thresh.multiply(100))    //test 3 true = 100
                  .add(t4_thresh.multiply(1000))   //test 4 true = 1000
                  .add(t5_thresh.multiply(10000))  //test 5 true = 10000
                  .rename('DSWE_Tests');           //rename result 
      
      //apply decision rules to classify pixel in 5 classes
      var rules = tests.remap(
        /**first list - pixel values in test image, 
         * second list: new values for dswe output in following order:
           * 1: no water
           * 2: water-high
           * 3: water-moderate
           * 4: potential wetland
           * 5: water-low
        */
        [0, 1, 10, 100, 1000, 
        1111, 10111, 11011, 11101, 11110, 11111, 
        111, 1011, 1101, 1110, 10011, 10101, 10110, 11001, 11010, 11100, 
        11000,
        11, 101, 110, 1001, 1010, 1100, 10000, 10001, 10010, 10100], 
        [1, 1, 1, 1, 1, 
         2, 2, 2, 2, 2, 2, 
         3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
         4, 
         5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 
         0)
         .rename('DSWE_Rules');
         
         //post-processing of image to apply hillshade/slope thresholds
        /**reclassifies to 1 (not water) if (in same order as coded):
            * water-high and slope >=30
            * water-moderate and slope >= 30
            * potential wetland and slope >= 20
            * water-low and slope >= 10
            * anywhere hillshade <= 110
        */
        var dswe =
        rules.where(slope.gte(30).and(rules.eq(2)), 1)
        rules.where(slope.gte(30).and(rules.eq(3)), 1)
        rules.where(slope.gte(20).and(rules.eq(4)), 1)
        rules.where(slope.gte(10).and(rules.eq(5)), 1)
        rules.where(hillshade.lte(110), 1);
        
        return(dswe.rename('DSWE'));
      };
      
       //---------------------------Functions to create Masks-----------------------------//    
         //--------------------------Agriculture and Urban Masking----------------------//
         
        // define function to reclassify urban class and create mask (urban = 0, all other = 1)
        var addUrbMask = function(aoi, image){
          var clipped = image.clip(aoi);
          var NALCMS_mask = clipped.remap([17],[0],1);
          return NALCMS_mask;
        };
        
        // define function to reclassify all ag classes and create mask (agriculture = 0, all other = 1) 
        var addAgMask = function(date, aoi, USimage, CAimage){
          var closestDate = function(image){
            return image.set(
              'dateDist',
              ee.Number(image.get('system:time_start')).subtract(ee.Date(date).millis()).abs()
            );
          };
          var US_landcover = USimage.map(closestDate).sort('dateDist').first()
                                    .select('cropland')
                                    .clip(aoi);
          var CA_landcover = CAimage.map(closestDate).sort('dateDist').first()
                            .select('landcover')
                            .clip(aoi);
          var USDA_mask = US_landcover.remap(
          [63,64,65,81,82,83,87,88,92,111,112,121,122,123,124,131,141,142,143,152,176,190,195],
          [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
          0);
          var AAFC_mask = CA_landcover.remap(
          [10, 20, 30, 34, 35, 50, 80, 110, 122, 130, 200, 210, 220, 230],
          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
          0);
          var agMask = ee.ImageCollection([USDA_mask, AAFC_mask]).mosaic();
          return agMask
        };
      
      //----------------------------------------------------------------------------//
      // Atmospheric Correction Functionswith Dark Object Subtraction (Chavez 1988)//
      //--------------------------------------------------------------------------//
      //   var radiance = function(image){
      //       var red_rad = image.expression(
      //         '(irrad4*RED)', 
      //           {'irrad4': image.getNumber('SOLAR_IRRADIANCE_B4'),
      //           'RED': image.select('B4')}).rename('B4');
      //       var green_rad = image.expression(
      //         '(irrad3*GREEN)', 
      //           {'irrad3':  image.getNumber('SOLAR_IRRADIANCE_B3'),
      //           'GREEN': image.select('B3')}).rename('B3');
      //       var blue_rad = image.expression(
      //         '(irrad2*BLUE)', 
      //         {'irrad2': image.getNumber('SOLAR_IRRADIANCE_B2'),
      //           'BLUE': image.select('B2')}).rename('B2');
      //       var NIR_rad = image.expression(
      //         '(irrad8*NIR)', 
      //         {'irrad8': image.getNumber('SOLAR_IRRADIANCE_B8'),
      //           'NIR': image.select('B8')}).rename('B8');
      //       var SWIR1_rad = image.expression(
      //         '(irrad11*SWIR1)', 
      //         {'irrad11':  image.getNumber('SOLAR_IRRADIANCE_B11'),
      //           'SWIR1': image.select('B11')}).rename('B11');
      //       var SWIR2_rad = image.expression(
      //         '(irrad12*SWIR2)', 
      //         {'irrad12': image.getNumber('SOLAR_IRRADIANCE_B12'),
      //           'SWIR2': image.select('B12')}).rename('B12');
  
      //     // Return an image composed of radiance values for each band of interest
      //     return ee.Image([red_rad, green_rad, blue_rad, NIR_rad, SWIR1_rad, SWIR2_rad]).set('system:time_start', image.get('system:time_start')).set('SOLAR_IRRADIANCE_B2', image.get('SOLAR_IRRADIANCE_B2')).set('SOLAR_IRRADIANCE_B3', image.get('SOLAR_IRRADIANCE_B3')).set('SOLAR_IRRADIANCE_B4', image.get('SOLAR_IRRADIANCE_B4')).set('SOLAR_IRRADIANCE_B8', image.get('SOLAR_IRRADIANCE_B8')).set('SOLAR_IRRADIANCE_B11', image.get('SOLAR_IRRADIANCE_B11')).set('SOLAR_IRRADIANCE_B12', image.get('SOLAR_IRRADIANCE_B12'));
      //   };

      
      // // Haze calculation and subtraction
      //   var subtract_haze = function(image) {
      //   // Select red band of image
      //   var image_red = image.select('B4');
      //   // Find minimum value
      //   var darkest = image_red.reduceRegion({
      //     reducer: ee.Reducer.min(),
      //     maxPixels: 120560400 
      //     }); //ensure that this number is great enough
          
      //   // Store redmin as a constant
      //   var redmin = ee.Number(darkest.get('B4'));
        
      //   // Calculate haze
      //   var haze_red = image.expression('redmin*((0.665)**(-4))/(0.665**(-4))',
      //     {'redmin': redmin}).rename('B4');
      //   var haze_blue = image.expression('redmin*((0.49)**(-4))/(0.665**(-4))',
      //     {'redmin': redmin}).rename('B2');
      //   var haze_green = image.expression('redmin*((0.56)**(-4))/(0.665**(-4))',
      //     {'redmin': redmin}).rename('B3');
      //   var haze_NIR = image.expression('redmin*((0.835)**(-4))/(0.665**(-4))',
      //   {'redmin': redmin}).rename('B8');
      //   var haze_SWIR1 = image.expression('redmin*((1.613)**(-4))/(0.665**(-4))',
      //   {'redmin': redmin}).rename('B11');
      //   var haze_SWIR2 = image.expression('redmin*((2.202)**(-4))/(0.665**(-4))',
      //     {'redmin': redmin}).rename('B12');
        
      //   // Create a new image representing haze values for each band
      //   var haze =  ee.Image([haze_blue, haze_green, haze_red, haze_NIR, haze_SWIR1, haze_SWIR2]).set('system:time_start', image.get('system:time_start')).set('SOLAR_IRRADIANCE_B2', image.get('SOLAR_IRRADIANCE_B2')).set('SOLAR_IRRADIANCE_B3', image.get('SOLAR_IRRADIANCE_B3')).set('SOLAR_IRRADIANCE_B4', image.get('SOLAR_IRRADIANCE_B4')).set('SOLAR_IRRADIANCE_B8', image.get('SOLAR_IRRADIANCE_B8')).set('SOLAR_IRRADIANCE_B11', image.get('SOLAR_IRRADIANCE_B11')).set('SOLAR_IRRADIANCE_B12', image.get('SOLAR_IRRADIANCE_B12'));
      
      //   // Calculate surface reflectance (radiance - haze)
      //   var boa = image.subtract(haze);
      //   // Clip to zero with .gt(0) if necessary
      //   return boa.set('system:time_start', image.get('system:time_start')).set('SOLAR_IRRADIANCE_B2', image.get('SOLAR_IRRADIANCE_B2')).set('SOLAR_IRRADIANCE_B3', image.get('SOLAR_IRRADIANCE_B3')).set('SOLAR_IRRADIANCE_B4', image.get('SOLAR_IRRADIANCE_B4')).set('SOLAR_IRRADIANCE_B8', image.get('SOLAR_IRRADIANCE_B8')).set('SOLAR_IRRADIANCE_B11', image.get('SOLAR_IRRADIANCE_B11')).set('SOLAR_IRRADIANCE_B12', image.get('SOLAR_IRRADIANCE_B12'));
        
      //   }; 
      
      //       // Convert to surface reflectance by dividing radiance by irradiance
      // var back_to_reflectance = function(image){
      //   var red_rad = image.expression(
      //     '(RED/irrad4)', 
      //     {'irrad4' : image.getNumber('SOLAR_IRRADIANCE_B4'),
      //       'RED': image.select('B4')}).rename('B4');
      //   var green_rad = image.expression(
      //     '(GREEN/irrad3)', 
      //     {'irrad3' : image.getNumber('SOLAR_IRRADIANCE_B3'),
      //       'GREEN': image.select('B3')}).rename('B3');
      //   var blue_rad = image.expression(
      //     '(BLUE/irrad2)', 
      //     {'irrad2': image.getNumber('SOLAR_IRRADIANCE_B2'),
      //       'BLUE': image.select('B2')}).rename('B2');
      //   var NIR_rad = image.expression(
      //     '(NIR/irrad8)', 
      //     {'irrad8' : image.getNumber('SOLAR_IRRADIANCE_B8'),
      //       'NIR': image.select('B8')}).rename('B8');
      //   var SWIR1_rad = image.expression(
      //     '(SWIR1/irrad11)', 
      //     {'irrad11' : image.getNumber('SOLAR_IRRADIANCE_B11'),
      //       'SWIR1': image.select('B11')}).rename('B11');
      //   var SWIR2_rad = image.expression(
      //     '(SWIR2/irrad12)', 
      //     {'irrad12' : image.getNumber('SOLAR_IRRADIANCE_B12'),
      //       'SWIR2': image.select('B12')}).rename('B12');
        
      //   // Return an image composed of radiance values for each band of interest
      //   return ee.Image([red_rad, green_rad, blue_rad, NIR_rad, SWIR1_rad, SWIR2_rad]).set('system:time_start', image.get('system:time_start')).set('SOLAR_IRRADIANCE_B2', image.get('SOLAR_IRRADIANCE_B2')).set('SOLAR_IRRADIANCE_B3', image.get('SOLAR_IRRADIANCE_B3')).set('SOLAR_IRRADIANCE_B4', image.get('SOLAR_IRRADIANCE_B4')).set('SOLAR_IRRADIANCE_B8', image.get('SOLAR_IRRADIANCE_B8')).set('SOLAR_IRRADIANCE_B11', image.get('SOLAR_IRRADIANCE_B11')).set('SOLAR_IRRADIANCE_B12', image.get('SOLAR_IRRADIANCE_B12'));
      // };
      
      
  //-------------END Functions to map onto Image Collection-------------//

  //---------------MAP FUNCTIONS-----------------//
     // Clip the images in each collection to the areaInput
      var l8_clipped = l8_filteredCollection.map(function(image){return image.clip(areaInput)});
      var s2_clipped = s2_filteredCollection.map(function(image){return image.clip(areaInput).set('system:time_start', image.get('system:time_start'))});
      var s1_clipped = s1_filteredCollection.map(function(image){return image.clip(areaInput)});
      var srtm_clipped = srtm.clip(areaInput);
      var ned_clipped = ned.clip(areaInput);
      var jrc_clipped = jrc.clip(areaInput);
      var USDA_clipped = USDA.map(function(image){return image.clip(areaInput)});
      var AAFC_clipped = AAFC.map(function(image){return image.clip(areaInput)});
      var NALCMS_clipped = NALCMS15.clip(areaInput);
      
    //Cloud mask both Landsat 8 and Sentinel 2 collections
      var l8_masked = l8_clipped.map(cloudMask);
      var s2_masked = s2_clipped.map(s2cloudMask);

      //Apply Atmospheric Correction algorithms to masked collection
      // Create new image of radiance values for all images in the image collection
      // var s2_radiance = s2_masked
      //   .map(radiance);
      
      //   // Perform dark object subtraction for radiance image collection
      // var dos = s2_radiance
      //   .map(subtract_haze);
        
      // // Convert corrected images from radiance to surface reflectance
      // var sr = dos
      //     .map(back_to_reflectance);
          
    //Map s2 algorithms onto the Masked & Corrected Sentinel 2 collection
      var s2_inputs = s2_masked
        .map(s2addNDVI)
        .map(s2addMNDWI)
        .map(s2addTCWGD); 
          
    //Map s2 algorithms onto the Clipped Sentinel 1 collection
      var s1_input = s1_clipped
        .map(toNatural)
        .map(removeBordersVV) 
        .map(removeBordersVH)          
        .map(bandRatio);
        
    //Select elevation and get slope for SRTM inputs
    var srtm_elevation = srtm_clipped.select('elevation');
    
    //Get slope from SRTM
    var srtm_slope = ee.Terrain.slope(srtm_clipped);
    
    //NED elevation 
    var ned_elevation = ned_clipped.select('elevation');
    
    //JRC frequency of water 
    var jrc_frequency = jrc_clipped.select('max_extent');
    //Map.addLayer(jrc_frequency);

      //Apply DSWE Function to Landsat 8 clipped and masked image collection 
      //With clipped SRTM as second input
        var dswe_input = addDSWE(l8_masked, srtm_clipped);

      //Select just the DSWE output band that is the categorical result
        var dswe_output = dswe_input.select('DSWE');
          
      //Reduce VV/VH collection to mean values 
      var s1_composite = s1_input.reduce(ee.Reducer.mean()).select(['VV_mean', 'VH_mean', 'VV/VH_mean'],['VV', 'VH', 'VV/VH']);
        
      //Composite Sentinel 2 using mean reducer and selecting only relevant bands
      var s2_composite = s2_inputs.mean().select(s2_bands);
      var s2_mosaic = s2_inputs.select('B4', 'B3', 'B2').mosaic();
      
      //Topographic Input
      var topographic_input =(
      //dswe_output
      srtm_elevation
      //srtm_slope
      //ned_elevation
      );
      //Map.addLayer(srtm_elevation);
      //Assemble user classification image stack w/ Sentinel-2, Sentinel-1, and DSWE
      var stack = s2_composite
        .addBands(s1_composite)
        .addBands(topographic_input);
  
      //Apply functions to create Masks for Urban and Agriculture (1:non-Ag or non-Urban, 0:Ag or Urban)
        var agMask = addAgMask(start, areaInput, USDA, AAFC)
        var urbMask = addUrbMask(areaInput, NALCMS_clipped)
        
    //--------------------------Random Forest Classification---------------------------//
        //Field data polygons
        //Provided by the Michigan Technological Research Institute
        var polygons = ee.FeatureCollection('users/ericacarcelen/allBasin_fieldPoly_v2');
        //Map.addLayer(polygons);
       // // Image stacks containing all of our classification parameters, composited over all 2019 
       //  // Covers the entire GLB - this allows the tool to classify anywhere in the basin
       // // Even if the chosen location areaInput does not include field data
        /// //   Call in each Lake Basin training stack 
            var mich_trainStack = ee.Image('users/ericacarcelen/mich_trainStack_L2v2_all2019');
            var erie_trainStack = ee.Image('users/ericacarcelen/erie_trainStack_L2v2_all2019');
            var huron_trainStack = ee.Image('users/ericacarcelen/huron_trainStack_L2v2_all2019');
            var ont_trainStack = ee.Image('users/ericacarcelen/ont_trainStack_L2v2_all2019');
            var superior_trainStack = ee.Image('users/ericacarcelen/sup_trainStack_L2v2_all2019');
              
              // Map.addLayer(mich_trainStack, [], 'mich_trainStack');
              // Map.addLayer(erie_trainStack, [], 'erie_trainStack');
              // Map.addLayer(huron_trainStack, [], 'huron_trainStack'); 
              // Map.addLayer(ont_trainStack, [], 'ont_trainStack');
              // Map.addLayer(superior_trainStack, [], 'superior_trainStack');
              
        //To filter field data used for classification according to the areaInput
          //get centroid of user selected aoi
          var areaInput_center = areaInput.centroid(ee.ErrorMargin(1));
          //select lake basin that intersects aoi
          var areaInput_basin = Lake_Basins.filterBounds(areaInput_center);

          //-------Field Data------//
          //filter field data by lake basin
          var field_data = newfield_erie_18.filterBounds(areaInput_basin);

          //var field_data_old = polygons.filterBounds(areaInput_basin);
          //Map.addLayer(field_data, {}, 'Filtered Field Data');
          
          //Create Image collection from each basin training stack in order to Mosaic
            var img_collection = ee.ImageCollection([mich_trainStack, erie_trainStack, 
              huron_trainStack, ont_trainStack, superior_trainStack]);

            //Mosaic Image Collection to create one mosaicked image of our Training Stack 
            var mosaic = img_collection.mosaic();

            //Rename the band names to match our user input Stack 
            var stack_training = mosaic.select(training_bands)
                  .rename(stack_bands);
                
            //Split the field data, half for training and half for validation
            //Create randomColumns in field data to randomly sampled 
            //Half of data for training and half to be used for validation
            var randomColumn = field_data.randomColumn("random", 1);
            var training_sample = randomColumn.filter(ee.Filter.gt("random",0.4));
            var validation_sample = randomColumn.filter(ee.Filter.lt("random", 0.4));
              
              //print(training_sample, 'training_sample');
              //print(validation_sample, 'validation_sample');
              Map.addLayer(validation_sample, [], 'validation sample', false);
              Map.addLayer(training_sample, [], 'training sample', false);
            
            //Sample the field training data over the training stack region to produce our training dataset
                var training = stack_training.sampleRegions({
                  collection: training_sample,
                  properties: ['GL2_rec3_0'], // 'rec3' is our 3 class system, 'rec4' is our 4 class forested system 
                  scale:10,
                  tileScale: 4
                });
              
              // Train a random forest classifier against training data.
              var trained = ee.Classifier.smileRandomForest(100).train(training, 'GL2_rec3_0');
              
              //Train an empty RandomForest classifier in order to get variable importance graph
              //var trained_explain = ee.Classifier.smileRandomForest(100).train(training, 'GL2_rec3_0');
              //Explain the trained dataset to get variable importance
              var dict = trained.explain();

              var variable_importance = ee.Feature(null, ee.Dictionary(dict).get('importance'));
                
              //Create a chart that maps variable importance for each variable 
              var chart =
                ui.Chart.feature.byProperty(variable_importance)
                .setChartType('ColumnChart')
                .setOptions({
                title: 'Random Forest Variable Importance',
                legend: {position: 'none'},
                hAxis: {title: 'Bands'},
                vAxis: {title: 'Importance'}
                });
              //Display chart in the console
              print(chart);
                
              //Classify the user created stack using the trained dataset
              var classified_1 = stack.classify(trained);
              //Apply the agriculture and urban mask
              var classified_2 = classified_1
                .multiply(urbMask)
                .multiply(agMask);
            
            // --------LAKE MASK-------//
            //Mask out lake water sections to avoid weird Blue Canadian Side    
            var tools = require('users/fitoprincipe/geetools:tools'); 
            var classified = tools.geometry.maskInside(classified_2, ErieLakeMask);
            
            //NWI background
              var basin_geo = Lake_Basins.filter(ee.Filter.eq('merge', 'lk_sup')).geometry();
              
              // var classified = classified_2.remap([0,1,2],[1,2,3],0);

              
              //------------------------USDA NAAS comparison ---------------------------------//
              var dataset = ee.ImageCollection('USDA/NASS/CDL')
                                .filter(ee.Filter.date('2018-01-01', '2019-12-31'))
                                .first();
              
              //Remap to 0/1/2 system
              //Function to remap everything 
              var naas_wetlands = dataset.remap([
                1, 2	,3	,4	,5	,6	,10	,11,12	,13	,14	,21	,22	,23	,24	,25	,26	,27	,28	,29	,30,31	,32	,33	,34	//25
                , 35,36	,37	,38	,39	,41	,42	,43	,44	,45	,46	,47	,48	,49	,50	,51	,52	,53	,54	,55	,56	,57	,58	,59	,60	,61//26	
                ,63	,64	,65	,66	,67	,68	,69	,70	,71	,72	,74	,75	,76	,77	,81	,82	//16
                ,83	//water
                ,87	//wetlands
                ,88,92	//2
                ,111 //open water
                ,112	,121	,122	,123	,124	,131	,141	,142	,143	,152	,176	//11
                ,190	//woody wetlands
                ,195	//herbaceous wetlands
                ,204	,205	,206	,207	,208	,209	,210	,211	,212	,213	,214	,215	,216	,217	,218	,219	,220	,221	//18
                ,222	,223	,224	,225	,226	,227	,228	,229	,230	,231	,232	,233	,234	,235	,236	,237	,238	,239	,240 //19	
                ,241	,242	,243	,244	,245	,246	,247	,248	,249	,250	,254],//11 - 133 total
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 //50
                ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,//17
                1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,4
                ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], //48
                5, 'cropland');
              
              var wetland_class_viz_naas = {
                min: 0, 
                max: 5, 
                palette:[
                '#FFD27F', // upland
                          '#2967D1', // open water
                          '#55B600', // inundated wetland - most of the wetlands in data set are the woody wetlands
                '#55B600', // light blue woody wetlands - classified as 2 in GL2_rec3_0, and 3 in GL2_rec4_0 bc dataset distinguishes wetlands, woody wetlands, and herbaceous wetlands, but majority is woody w/ some herbaceous 
                '#ff3300',//red herbaceous wetland
                '#ffff00' //extra default
                ]
              };
              
              //--------------CANADA SIDE: AAFC COMPARISON--------------//
              //Canada crop inventory
              var aafc_1 = ee.ImageCollection('AAFC/ACI')
                .filterDate('2018-01-01', '2019-01-01')
                .first();
              
              //Remap AAFC dataset to our 0/1/2 system
              var aafc_wetlands = aafc_1.remap([10, //1
              20,	//water 
              30, 34, 35, 50, //4
              80, //wetland
              110,120	,122,	//3
              130,	//Too Wet to be Seeded - includedi n wetland class
              131	,132	,133	,134	,135	,136,137	,138,139	,140	,141	,142,145	,146	,147	,148	,149 , //17
              150	,151	,152	,153	,154	,155 ,156	,157	,158	,160	,162	,167	,174	,175	,176	,177	,178	, //17
              179	,180	,181	,182	,183	,185	,188	,189	,190	,191	,192	,193	,194	,195 ,196	,197	,198	,199	, //18
              200	,210	,220	,230], //4
              [0,1,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 0, 'landcover');
                
              var wetland_class_viz_aafc = {
                min: 0, 
                max: 2, 
                palette:[
                '#FFD27F', // upland
                          '#2967D1', // open water
                          '#55B600', // wetland
                ]
              };
                
              // //--------------------Statistical Evaluation/Validation Process------------------//
              // //UnComment this section to print statistics in the console 
              // //Sample the validation field data from the classified result to compare ourp results to the field data
              //   //Sample the classified wetland cover map 
                var validation = classified.sampleRegions({
                  collection: validation_sample,
                  properties: ['GL2_rec3_0'],
                  scale:10,
                  tileScale: 8
                });
                
              //   //Create a confusion matrix comparing our results =, 'classification', to the field validation data
                var conf_valid = validation.errorMatrix('classification', 'GL2_rec3_0');
                print(conf_valid, 'Confusion Matrix');
                
              //   //Compute overall accuracy from the confusion matrix
                var overall_accuracy = conf_valid.accuracy();
                print(overall_accuracy, 'Overall Accuracy');
                
              //   //Computer consumer's accuracy from the confusion matrix
                var consumers_accuracy = conf_valid.consumersAccuracy();
                print(consumers_accuracy, 'Consumers Accuracy');
                
                //Compute producer's accuracy from the confusion matrix
                var producers_accuracy = conf_valid.producersAccuracy();
                print(producers_accuracy, 'Producers Accuracy');
                
                //Compute kappa statistic form the confusion matrix 46,318
                var kappa = conf_valid.kappa();
                print(kappa, 'Kappa statistic');
                
                //NWI filter bounds for each state
                var oh_nwi_clipped = oh_nwi.filterBounds(areaInput);
                var mi_nwi_clipped = MI_wetlands.filterBounds(areaInput);
                var ny_nwi_clipped = NY_wetlands.filterBounds(areaInput);
                var wi_nwi_clipped = WI_south_wetlands.merge(WI_north_wetlands).filterBounds(areaInput);
                var mi_wi_nwi_clipped = mi_nwi_clipped.merge(wi_nwi_clipped).filterBounds(areaInput);
                var mn_northeast_nwi_clipped = MN_northeast_wetlands.filterBounds(areaInput);
                var mn_centraleast_nwi_clipped = MN_centraleast_wetlands.filterBounds(areaInput);
                var mn_nwi_clipped = mn_northeast_nwi_clipped.merge(mn_centraleast_nwi_clipped);
                var mi_wi_mn_nwi_clipped = mi_wi_nwi_clipped.merge(mn_nwi_clipped);

                //print(oh_nwi_clipped, 'oh_nwi_clipped');
                
                //Remap NWI shapefiles into our classification for open water and wetlands
                //Ohio
                var oh_nwi_remap = ee.FeatureCollection(oh_nwi_clipped.remap(['Freshwater Emergent Wetland', 'Freshwater Forested/Shrub Wetland', 
                'Freshwater Pond', 'Lake', 
                'Riverine'],[2, 2, 1, 1, 2],'WETLAND_TY'));
                //Map.addLayer(oh_nwi_remap, [], 'nwi_remap');

                //Michigan
                var mi_nwi_remap = ee.FeatureCollection(mi_nwi_clipped.remap(['Freshwater Emergent Wetland', 'Freshwater Forested/Shrub Wetland', 
                'Freshwater Pond', 'Lake', 
                'Riverine'],[2, 2, 1, 1, 2],'WETLAND_TY'));
                
                //New York
                var ny_nwi_remap = ee.FeatureCollection(ny_nwi_clipped.remap(['Freshwater Emergent Wetland', 'Freshwater Forested/Shrub Wetland', 
                'Freshwater Pond', 'Lake', 
                'Riverine'],[2, 2, 1, 1, 2],'WETLAND_TY'));
                
                //Wisconsin
                var wi_nwi_remap = ee.FeatureCollection(wi_nwi_clipped.remap(['Freshwater Emergent Wetland', 'Freshwater Forested/Shrub Wetland', 
                'Freshwater Pond', 'Lake', 
                'Riverine'],[2, 2, 1, 1, 2],'WETLAND_TY'));
                
                //MI & WI 
                var mi_wi_nwi_remap = ee.FeatureCollection(mi_wi_nwi_clipped.remap(['Freshwater Emergent Wetland', 'Freshwater Forested/Shrub Wetland', 
                'Freshwater Pond', 'Lake', 
                'Riverine'],[2, 2, 1, 1, 2],'WETLAND_TY'));
                
                //Minnesota
                var mn_nwi_remap = ee.FeatureCollection(mn_nwi_clipped.remap(['Freshwater Emergent Wetland', 'Freshwater Forested/Shrub Wetland', 
                'Freshwater Pond', 'Lake', 
                'Riverine'],[2, 2, 1, 1, 2],'WETLAND_TY'));
                
                //MN, MI, and WI 
                var mi_wi_mn_nwi_remap = ee.FeatureCollection(mi_wi_mn_nwi_clipped.remap(['Freshwater Emergent Wetland', 'Freshwater Forested/Shrub Wetland', 
                'Freshwater Pond', 'Lake', 
                'Riverine'],[2, 2, 1, 1, 2],'WETLAND_TY'));


                //Convert vector to raster 
                //Ohio
                var oh_nwi_raster = oh_nwi_remap
                  .filter(ee.Filter.notNull(['WETLAND_TY']))
                  .reduceToImage({
                    properties: ['WETLAND_TY'], 
                    reducer: ee.Reducer.first()
                  });
                
                //Michigan
                 var mi_nwi_raster = mi_nwi_remap
                  .filter(ee.Filter.notNull(['WETLAND_TY']))
                  .reduceToImage({
                    properties: ['WETLAND_TY'], 
                    reducer: ee.Reducer.first()
                  });
                  
                //New York
                var ny_nwi_raster = ny_nwi_remap
                  .filter(ee.Filter.notNull(['WETLAND_TY']))
                  .reduceToImage({
                    properties: ['WETLAND_TY'], 
                    reducer: ee.Reducer.first()
                  });
                
                //Wisconsin
                 var wi_nwi_raster = wi_nwi_remap
                  .filter(ee.Filter.notNull(['WETLAND_TY']))
                  .reduceToImage({
                    properties: ['WETLAND_TY'], 
                    reducer: ee.Reducer.first()
                  });
                  
                //WI & MI
                 var mi_wi_nwi_raster = mi_wi_nwi_remap
                  .filter(ee.Filter.notNull(['WETLAND_TY']))
                  .reduceToImage({
                    properties: ['WETLAND_TY'], 
                    reducer: ee.Reducer.first()
                  });
                  
                //MN
                var mn_nwi_raster = mn_nwi_remap
                  .filter(ee.Filter.notNull(['WETLAND_TY']))
                  .reduceToImage({
                    properties: ['WETLAND_TY'], 
                    reducer: ee.Reducer.first()
                  });
                  
                //MN, Mi, WI
                var mi_wi_mn_nwi_raster = mi_wi_mn_nwi_remap
                  .filter(ee.Filter.notNull(['WETLAND_TY']))
                  .reduceToImage({
                    properties: ['WETLAND_TY'], 
                    reducer: ee.Reducer.first()
                  });
               
                  //print(oh_nwi_remap, 'oh nwi remap');
                  
                //NWI Statistics
                //Sample regions for classification results against remapped NWI wetland/open water dataset
                var nwi_validation = classified.sampleRegions({
                  collection: mi_wi_nwi_remap, //Change NWI state here
                  properties: ['WETLAND_TY'],
                  scale:10,
                  tileScale: 4
                });
                
                //print(oh_nwi_remap.size());
                //Create a confusion matrix comparing our results =, 'classification', to the field validation data
                var nwi_errorMatrix = nwi_validation.errorMatrix('classification', 'WETLAND_TY');
              //   print(nwi_errorMatrix, 'NWI Confusion Matrix');

                var overall_accuracy = nwi_errorMatrix.accuracy();
              //   print(overall_accuracy, 'Overall Accuracy');
                
              // //   //Computer consumer's accuracy from the confusion matrix
                var consumers_accuracy = nwi_errorMatrix.consumersAccuracy();
              //   print(consumers_accuracy, 'Consumers Accuracy');
                
              //   //Compute producer's accuracy from the confusion matrix
                var producers_accuracy = nwi_errorMatrix.producersAccuracy();
              //   print(producers_accuracy, 'Producers Accuracy');
                
              //   //Compute kappa statistic form the confusion matrix
                var kappa = nwi_errorMatrix.kappa();
              //   print(kappa, 'Kappa statistic');
                
                //var nwi_collection = ee.FeatureCollection([oh_nwi_raster, classified]);
                
                // var stat_collection = ee.FeatureCollection([nwi_errorMatrix, overall_accuracy,
                // consumers_accuracy, producers_accuracy, kappa]);

                // var nwi_errorMatrix_feat = ee.Feature(null, {matrix: nwi_errorMatrix.array()});
                // Export.table.toDrive({
                //   collection: ee.FeatureCollection(nwi_errorMatrix_feat),
                //   description: 'nwi-errorMatrix-sampleRegions-Michigan-NM',
                //   fileFormat: 'CSV'
                // });
                
                
                // Export.table.toDrive({
                //   collection: nwi_validation, 
                //   description: 'nwi-sampleRegions', 
                //   fileFormat: 'CSV'
                // });
                
                //var nwi_full = nwi_collection.errorMatrix('classification', 'WETLAND_TY');
                // print(nwi_valid);
                
                // var nwi_full_feat = ee.Feature(null, {matrix: nwi_full.array()});
                // Export.table.toDrive({
                //   collection: ee.FeatureCollection(nwi_full_feat), 
                //   description: 'nwi-full-errorMatrix',
                //   fileFormat: 'CSV'
                // });

                // Export.table.toDrive({
                //   collection: nwi_valid, 
                //   description: 'nwi_validation_errorMatrixfull_images', 
                //   fileFormat: 'CSV'
                // });
                
                // Export.table.toDrive({
                //   collection: nwi_validation,
                //   description: 'nwi_validation_sampleRegions',
                //   fileFormat: 'CSV'
                // });
                
                // var nwi_viz = {
                // min: 1,
                // max: 9,
                // palette: ['#2768d1','#2768d1', //Lake, Freshwater Pond --> open water
                //   '#52b700','#52b700','#52b700','#52b700', // Various Freshwater Wetland
                //   '#2768d1', // Riverine --> open water
                //   '#52b700','#52b700'] //Various Freshwater Wetland
                //   }
                
                //---- NWI, AAFC & NAAS wetlands Map layers----//
                //Add NWI map layer
                Map.addLayer(mi_wi_mn_nwi_raster//Change state NWI here
                , wetland_class_viz, 'NWI Raster', false);
                
                //Clip and add map layer for AAFC & NAAS
                var naas_clipped = naas_wetlands.clip(areaInput);
                var aafc_clipped = aafc_wetlands.clip(areaInput);
                
                Map.addLayer(naas_clipped, wetland_class_viz_naas, 'NAAS wetlands', false);
                Map.addLayer(aafc_clipped, wetland_class_viz_aafc, 'AAFC wetlands', false);
                
                
          //endImage is the resulting classification
          var endImage = classified;
       
       //Return collection for analysis
       return [ee.Image(endImage), //0 Classification result
              ee.Image(s2_composite), //1 Sentinel 2 composite
              ee.Image(dswe_output), //2 DSWE output
              ee.Image(s1_composite), //3 Sentinel 2 Composite
              ee.ImageCollection(s2_inputs), //4 Sentinel 2 inputs used for analysis 
              ee.Image(s2_mosaic) //5 Sentinel 2 mosaic 
       ]}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////USER INTERFACE//////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// style templates ////
var reminderTxtStyle = {fontSize: '12px', color: 'gray', margin: '0 0 0 10px'};
var borderStyle = '7px double DarkCyan';
var optionsTitleStyle = {fontSize: '18px', fontWeight: 'bold', textAlign: 'center', color: 'DarkCyan'};
var warningLabelStyle = {color: "#EB7B59", fontSize: '14px'};


////a dictionary containing containing labels ////
var AllLabels = { 
  title: ['Wetland Extent Tool 2.0 (WET)'],
  intro: [
        'Automatically map wetland extent in the Great Lakes Basin utilizing Landsat 8, Sentinel 2, and Sentinel 1 C-SAR datasets.'
     ],
  paramTitle: ['Parameters:'],
  startDayLabel: ['Start Date:'],
  endDayLabel: ['End Date:'],
  yearWarningMsg: [
    "Note: including the current year in analysis will only work if it is currently September or later.",
  ],
  assetInputPlaceholder: ["user/[username]/[asset name]"],
  assetInstr: [
    "To use your own area of analysis, click the 'Assets' tab, then 'New' to upload a shapefile.  Once it's uploaded, click the asset, copy the table ID, and paste above."],
  mapDisplayTitle: ['Display Images on the Map'],
  LClegendTitle: ['Wetland Classification Legend'],
  NDVIlegendTitle: ['NDVI Legend'],
  NDWIlegendTitle: ['MNDWI Legend'],
  runbuttonLabel: ['Add Images to the Map'],
  resetbuttonLabel: ['Reset Map'],
  exportTitle: ['Export to Google Drive'],
  exportInstr1: [
    'Select an image type to export. Exports options for all years in the selected range for the selected area will be generated. Not available for multiple polygons (All Areas).',    ],
  exportselectPlaceholder: ['Select an analysis type'],
  exporterrormsg: ['An image type to export must be selected first.'],
  ICimageExportButton: ['Export Images (GeoTIFF)'], 
  ICvideoExportButton: ['Export Image Collection as a video'],
  exportInstr2: [
    "Click the 'Tasks' tab in the upper right panel of this screen, and then click 'Run' to export the image. Delete any spaces in the 'Task Name' before exporting the image."],
  PITitle: ['Time Series Charts'],
  PIInstr:[
    "Select an analysis type to see how values have changed in the area of interest over the selected range of years.",
    ],
  PIselectLabel: ['Analysis Type:'],
  pointlayername: ["Point Analyzed by Change Inspector"],
  mapinfopanelTitle: ["Just Added:"]
} ;


////------------------------------------------Panel for intro (AllPanels index 1)------------------------------------------------ ////
var IntroPanel = ui.Panel([
    ui.Label({
      value: AllLabels.title, //this will be a variable that changes based on language selection
      style: {color: 'DarkCyan', fontWeight: 'bold', fontSize: '24px', margin: '10px 5px'}
    }),
    ui.Label({
      value: AllLabels.intro
    }),
]);

////-----------------------------------Panel for setting analysis parameters (AllPanels index 2)------------------------------ ////
// Date Selection Panel =========================================================
// Define textboxes for user to input desired date range
var start_text = ui.Textbox({
      value: ('2019-05-25'), // arbitrary date 
      style: {margin:'5px 15px'}
});

var end_text = ui.Textbox({
        value: ('2019-09-25'), // arbitrary date 
        style: {margin:'5px 15px'}
});

// Final panel that holds the headings and textboxes to input date range for images
var DateSelectionPanel = ui.Panel({
  widgets: [
    /*0*/ ui.Label({value: AllLabels.startDayLabel, style: {fontWeight: "bold"} }),
    /*1*/ start_text,
    /*2*/ ui.Label({value: AllLabels.endDayLabel, style: {fontWeight: "bold"} }),
    /*3*/ end_text,
    ],
});

////////////////////////////////////////
//////////// Area Selection ////////////
////////////////////////////////////////
// Panel for drawing your own asset //
var geoInputPanel = ui.Panel({
  widgets: [
    /*0*/ ui.Label(["To draw a geometry, hover on the 'Geometry Imports' tab (upper left, center screen) and click '+new Layer' at the bottom of the panel. Use the 'Draw a Rectangle' tool to make one polygon and keep it named 'geometry'. Re-run the tool in Google Earth Engine and then run analysis on your added geometry. Disregard these instructions if you have already completed the former steps."])
    ]
});

var aoiInputPanel = ui.Panel({
  widgets: [
    ui.Label(["Run analysis using example AOI's"])]
});


//Setting the area of analysis
var areaselect = ui.Select({
    items: all_roi,
    style: {margin: '5px 15px', width: '150px'},
    onChange: setAreaOfInterest
  });

areaselect.setPlaceholder('Select an Area');

var AreaSelectionPanel = ui.Panel({
  widgets: [
    /*0*/ areaselect,
    //*1*/ assetInputPanel, // added to the panel if 'Upload your own asset' is selected
    geoInputPanel, // added to the panel is 'Draw your own asset' is selected
    ]
});
  
////////////////////////////////////////
/////// FINAL PARAMETERS PANEL /////////
////////////////////////////////////////
var ParametersPanel = ui.Panel({
  widgets: [
    /*0*/ ui.Label({
      value: AllLabels.paramTitle,
      style: {fontSize: '18px', fontWeight: 'bold', textAlign: 'center'}, 
    }),
    /*1*/ DateSelectionPanel,
    /*2*/ AreaSelectionPanel,
    ]
  });

////--------------------------panel for displaying layers on map (index 3)---------------------------------------------------////
////Panel with checkboxes and legends (which are hidden on default) and buttons to add and remove layers to the map.
////For the wetland classification, NDVI, and NDWI checkboxes, checking the box will result in the legends being added to the panel.

///////////////////////////////////////////////////
///// Checkboxes for selecting layers to add /////
/////////////////////////////////////////////////
var TCcheckbox = ui.Checkbox({
  label: "True Color",
  value: true
});

var LCcheckbox = ui.Checkbox({
  label: "Wetland Classification",
  onChange: function(){
    if (LCcheckbox.getValue()===true){
      legendsPanel.widgets().set(0, LClegend);}
    else{legendsPanel.widgets().remove(LClegend)}
  },
  //value: true ////sets the checkbox as checked by default
});

var NDVIcheckbox = ui.Checkbox({
  label: "Normalized Difference Vegetation Index (NDVI)",
  onChange: function(){
    if (NDVIcheckbox.getValue()===true){
      legendsPanel.widgets().set(1, NDVIlegend);}
     else{legendsPanel.widgets().remove(NDVIlegend)}
  },
  //value: true ////sets the checkbox as checked by default
});

var NDWIcheckbox = ui.Checkbox({
  label: "Modified Normalized Wetness Index (MNDWI)",
  onChange: function(){
    if (NDWIcheckbox.getValue()===true){
      legendsPanel.widgets().set(2, NDWIlegend);}
     else{legendsPanel.widgets().remove(NDWIlegend)}
  },
  //value: true ////sets the checkbox as checked by default
});

var s1checkbox = ui.Checkbox({
  label: "Sentinel-1 Composite VV/VH"
});

var dswecheckbox = ui.Checkbox({
  label: "DSWE Output"
});

var checkboxesPanel = ui.Panel({
   widgets:[
    /*0*/ TCcheckbox,
    /*1*/ LCcheckbox,
    /*2*/ NDVIcheckbox,
    /*3*/ NDWIcheckbox,
    /*4*/ s1checkbox,
    /*5*/ dswecheckbox,
    ]
});

/////////////////////////////////////////
//////// Legend Panels /////////////////
////////////////////////////////////////

//Land classification legend

var LClegend = ui.Panel({
  widgets:[ui.Label({
    value: AllLabels.LClegendTitle,
    style: {
      fontWeight: 'bold',
      fontSize: '14px',
      margin: '0 0 4px 0',
      padding: '0'
    }
  })],
  style: {
    padding: '8px 15px'
  }
});


////___ defining function that creates and styles 1 row of the legend. ___////
var makeRow = function(color, name) {
 
      //// Create the label that is actually the colored box. ////
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          padding: '8px', // Use padding to give the box height and width.
          margin: '0 0 4px 0'
        }
      });
 
      //// Create the label that is the description text.////
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      //// return the panel ////
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};
 
//// description text for the legend ////
var LCnames = ['Upland','Open Water','Wetland'];

//// Run the function using the land classification palette and the LCnames list as the color and name inputs ////
for (var i = 0; i < 3; i++) {
  LClegend.add(makeRow(paletteLC[i], LCnames[i]));
  } 

////___ defines function that makes a color bar given a palette (used to make NDVI and NDWI color bars). Used in the thumbnail params ___/////
function makeColorBar(palette) {
  return {
    bbox: [0, 0, 1, 0.1],
    dimensions: '100x25',
    format: 'png',
    min: 0,
    max: 1,
    palette: palette
  };
}

///////// NDWI  Legend /////////

//// Create the color bar for the legend.////
var NDWIcolorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0),
  params: makeColorBar(paletteNDWI),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '25px'},
});

//// Create a panel with two numbers for the legend.////
var NDWIlegendLabels = ui.Panel({
  widgets: [
    ui.Label('-1', {margin: '4px 8px'}),
    ui.Label('0.5', {margin: '4px 230px'})
    ],
  layout: ui.Panel.Layout.flow('horizontal')
});


////the final panel for showing the NDWI legend ////
var NDWIlegend = ui.Panel({
  widgets: [
    ui.Label({
      value: AllLabels.NDWIlegendTitle,
      style: {
        fontWeight: 'bold',
        fontSize: '14px',
        margin: '0 0 4px 0',
        padding: '0'
      }
    }),
    NDWIcolorBar,
    NDWIlegendLabels,
  ],
  style: {
    padding: '8px 15px'
  }
});


//////// NDVI Legend ////////

//// Create the color bar for the legend ////
var NDVIcolorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0),
  params: makeColorBar(paletteNDVI),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '25px'},
});

//// Create a panel with two numbers for the legend. ////
var NDVIlegendLabels = ui.Panel({
  widgets: [
    ui.Label('0', {margin: '4px 8px'}),
    ui.Label('1', {margin: '4px 245px'})
  ],
  layout: ui.Panel.Layout.flow('horizontal')
});


////the final panel for showing the NDVI legend ////
var NDVIlegend = ui.Panel({
  widgets: [
    ui.Label({
      value: AllLabels.NDVIlegendTitle,
      style: {
        fontWeight: 'bold',
        fontSize: '14px',
        margin: '0 0 4px 0',
        padding: '0'
      }
    }),
    NDVIcolorBar,
    NDVIlegendLabels],
  style: {
    padding: '8px 15px'
  }
});

////final panel holding all the legends //// 
//it is an empty by panel by default, so the legends will only appear when the corresponding checkbox is checked
var legendsPanel = ui.Panel({
  widgets:[
  /*0*/ ui.Panel(), //LClegend,
  /*1*/ ui.Panel(), //NDWIlegend,
  ]
});

///////////////////////////////////////////////////
//////////// Panel with the buttons //////////////
//////////////////////////////////////////////////

//first, define function that adds layers based on the checboxes that are selected // 
function DisplayLayers(collection){
  //var image = ee.ImageCollection(collection);
  var final_collection = collection;
  var endImage = final_collection[0];
  var s2_composite = final_collection[1];
  var dswe_output = final_collection[2];
  var s1_composite = final_collection[3];
  var s2_mosaic = final_collection[4];
    if (TCcheckbox.getValue()===true){Map.addLayer(s2_mosaic, trueColor, areaselect.getValue() + " True Color")}
    if (NDVIcheckbox.getValue()===true){Map.addLayer(s2_composite, NDVIvisParams, areaselect.getValue() + " NDVI")}
    if (NDWIcheckbox.getValue()===true){Map.addLayer(s2_composite, NDWIvisParams, areaselect.getValue() + " MNDWI")}
    if (LCcheckbox.getValue()===true){Map.addLayer(endImage, wetland_class_viz, areaselect.getValue() + " Wetland Classification" )}
    if (s1checkbox.getValue()===true){Map.addLayer(s1_composite, {min: 1, max: 31, gamma: 2}, areaselect.getValue() + " Sentinel 1 Composite")}
    if (dswecheckbox.getValue()===true){Map.addLayer(dswe_output, dswe_vis, areaselect.getValue() + " DSWE")}
}

//the actual button 
var runbutton = ui.Button({
  label: AllLabels.runbuttonLabel,
  style: {width: '300px', color: 'DarkCyan', padding: '15px 5px 0px 5px'},
  onClick: function(){
    var areaInput = setAreaOfInterest(areaselect.getValue());
    Map.centerObject(areaInput);
    var FinalCollection = createAnalysisIC(start_text.getValue(), end_text.getValue(), areaselect.getValue());
    //run the DisplayLayers() function w/ the Final Collection as the input//
    DisplayLayers(FinalCollection);
    //set width of the mapinfopanel and add text to the box// 
    mapinfopanel.style().set({width: '200px'});
    mapinfopanel.widgets().set(0,ui.Label({value: AllLabels.mapinfopanelTitle, style: {margin: "0px", fontWeight: "bold"}}));
    mapinfopanel.widgets().set(1,ui.Label({value: start_text.getValue() + "–" + end_text.getValue() + ".", style: {margin: "0px"}}));
    mapinfopanel.widgets().set(2,ui.Label({value: areaselect.getValue() + ".", style: {margin: "0px"}}));
  }
});

var resetbutton = ui.Button({
  label: AllLabels.resetbuttonLabel,
  style: {width: '300px', color: '#EB7B59', padding: '5px 5px 15px 5px',},
  onClick: function reset(){
    //removes all layers in the map, adds aoi's outlines
    Map.layers().reset();
    Map.addLayer(outlines, {color: 'fecb00'}, 'Lake Basins', true);
  }
})

//final panel that holds the buttons 
var buttonsPanel = ui.Panel({
  widgets: [
    runbutton, 
    resetbutton]
});

/////////////////////////////////////////////////
////FINAL PANEL FOR DISPLAYING LAYERS ON MAP ////
////////////////////////////////////////////////
var MapDisplayPanel = ui.Panel({
  widgets:[
    /*0*/ ui.Label({
      value: AllLabels.mapDisplayTitle,
      style: optionsTitleStyle, 
    }),
    /*1*/ checkboxesPanel,
    /*2*/ legendsPanel, ////even though it's empty by default, it must be added so the legends will show up
    /*3*/ buttonsPanel,
    ],
  style: {margin: '10px 0px 0px 0px', border: borderStyle},
});

////////-------------------------------------------------panel for exporting data (AllPanels index 4)------------------------------------------////

/////////////////////
///// functions /////
/////////////////////

////___ function for exporting images in an image collection ___////
function exportImages(collection_I, band_I, filename_I){ 
  var exportImage;
  if (band_I == 'classification'){
    exportImage = collection_I.select('classification');
  } else if 
    (band_I =='NDVI'){ 
      exportImage=collection_I.select('NDVI') ;
  } else if 
    (band_I =='MNDWI'){ 
      exportImage=collection_I.select('MNDWI') ;
  } else if 
    (band_I =='VV/VH'){ 
      exportImage=collection_I.select('VV/VH') ;
  } else if 
    (band_I =='VV'){ 
      exportImage=collection_I.select('VV') ;
  } else if 
    (band_I =='VH'){ 
      exportImage=collection_I.select('VH') ;
  } else if 
    (band_I =='DSWE_Output'){ 
      exportImage=collection_I.select('DSWE_Output') ;
    } else  
      exportImage=collection_I.select('B4', 'B3', 'B2');

  var areaname = ee.String(areaselect.getValue()).replace(' ', '', 'g').replace('/', '').getInfo(); 
  var areaGeo = setAreaOfInterest(areaselect.getValue());
  Export.image.toDrive({
    image: exportImage,
    description: areaname + "_" + filename_I, //generates the task/file name
    scale: 10, //meters per pixel
    maxPixels: 2e10, 
    region: areaGeo //sets the bounds of the exported image to be the area of interest
  });
}

///////////////////
///// widgets /////
///////////////////

//// menu to select the image type to export ////
var exportselect = ui.Select({
  items: ['Classification', 'True Color', 'NDVI', 'MNDWI', 'VV/VH', 'DSWE','VV','VH' ],
  style: {margin: '0px 0px 10px 10px' },
  placeholder: AllLabels.exportselectPlaceholder,
  onChange: function(){ExportPanel.widgets().remove(exporterrormsg)},
});

//// error message that appears when clicking the export button without having selected an image type to export ////
var exporterrormsg = ui.Label({value: AllLabels.exporterrormsg, style: warningLabelStyle});

////label that appears and provides further instructions once user has clicked export button ////
var exportInstr2 = ui.Label(AllLabels.exportInstr2); 

//// button for exporting images ////
var ICimageExport = ui.Button({
  label: AllLabels.ICimageExportButton,
  style: {width: '300px', color: 'DarkCyan', padding: '15px 5px 0px 5px',},
  onClick: function(){
    if (exportselect.getValue() === null){
      ExportPanel.widgets().set(3, exporterrormsg);
      }
    else{
      var ExportCollection = createAnalysisIC(start_text.getValue(), end_text.getValue(), areaselect.getValue());
      if (exportselect.getValue() == 'NDVI'){exportImages(ExportCollection[1], 'NDVI', "NDVI")}
      if (exportselect.getValue() == 'Classification'){exportImages(ExportCollection[0], 'classification', "Classification")}
      if (exportselect.getValue() == 'MNDWI'){exportImages(ExportCollection[1], 'MNDWI', "MNDWI")}
      if (exportselect.getValue() == 'VV/VH'){exportImages(ExportCollection[3], 'VV/VH', "VV/VH")}
      if (exportselect.getValue() == 'DSWE'){exportImages(ExportCollection[2], 'DSWE_Output', "DSWE")}
      if (exportselect.getValue() == 'True Color'){exportImages(ExportCollection[5], ['B4', 'B3', 'B2'], "TrueColor")}
      if (exportselect.getValue() == 'VV'){exportImages(ExportCollection[3], 'VV', "VV")}
      if (exportselect.getValue() == 'VH'){exportImages(ExportCollection[3], 'VH', "VH")}
      ExportPanel.widgets().set(5, exportInstr2);}
  } 
});

///////////////////////////////////////////////////////
///// FINAL PANEL FOR EXPORTING IMAGES AND VIDEOS /////
//////////////////////////////////////////////////////
var ExportPanel = ui.Panel({
  widgets: [
    /*0*/ ui.Label({
      value: AllLabels.exportTitle,
      style: optionsTitleStyle, 
    }),
    /*1*/ ui.Label(AllLabels.exportInstr1),
    /*2*/ exportselect,
    /*3*/ ui.Panel(), //placeholder for error message
    /*4*/ ICimageExport,
    /*5*/ ui.Panel(), //placeholder for further instructions
    ],
  layout: ui.Panel.Layout.flow('vertical', 'true'),
  style: {margin: '10px 0px 0px 0px', border: borderStyle}
});
////////-------------------------------------panel for point change inspector (AllPanels index 5)-------------------------------////


//menu for selecting what the chart should show // 
var PIselect = ui.Select({
  items: ['NDVI', 'MNDWI', 'TCWGD'],
  value: 'NDVI', 
  onChange: function(){
    if (PIselect.getValue()=="Wetland Classification"){
      PIPanel.widgets().set(7, LCclassesPanel)}
    else {PIPanel.widgets().remove(LCclassesPanel)}
    }
});

var LCclassesPanel = ui.Panel({
  widgets: [
    ui.Label('Wetland'),
    ui.Label('Open Water'),
    ui.Label('Upland'),
    //ui.Label('4 = Bare ground')
    ],
    style: reminderTxtStyle
});

////////-------------------------------------panel for point change inspector (AllPanels index 5)-------------------------------////

////checkbox to turn the point change inspector on and off ////
var PI_OnOff = ui.Button({
  label: "Generate Time Series Chart",
  style: {width: '300px', color: 'DarkCyan', padding: '5px 5px 15px 5px',},
  onClick: function(){ 
        //// Create the image collection and then a chart of the spectral index selected by user. ////
        var PICollection = createAnalysisIC(start_text.getValue(), end_text.getValue(), areaselect.getValue());
        var chartband;
        var analysis_collection;
        var region = setAreaOfInterest(areaselect.getValue());
         if (PIselect.getValue()=='NDVI'){chartband = 'NDVI'; analysis_collection = PICollection[4], 'NDVI'}
          else if (PIselect.getValue()=='MNDWI'){chartband = 'MNDWI'; analysis_collection = PICollection[4], 'MNDWI'}
          else if (PIselect.getValue()=='TCWGD'){chartband = 'TCWGD';analysis_collection = PICollection[4], 'TCWGD'}
          //else if (PIselect.getValue()=='Wetland Classification'){chartband = 'remapped'; analysis_collection = PICollection[0], 'wetland_classification'}
        var indexChart = ui.Chart.image.seriesByRegion({
          imageCollection: analysis_collection, 
          regions: region,
          reducer: ee.Reducer.mean(),
          scale:100,
          band: chartband,
          seriesProperty: PIselect.getValue()
        });
        ////set the appearance of the chart ////
        indexChart.setOptions({
    title: PIselect.getValue() + " Time Series Chart",
    lineWidth: 2,
    pointSize: 5,
    colors: ['#26A69A'],
    interpolateNulls: true,
    hAxis: {
        title: 'Date'
    },
    vAxis: {
        title: PIselect.getValue()
    }})
        ////chart set to PIPanel at index position 6 ////
        PIPanel.widgets().set(5, indexChart);
    }});

////////////////////////////////////////////
//// FINAL POINT CHANGE INSPECTOR PANEL ////
////////////////////////////////////////////
var PIPanel = ui.Panel({
  widgets: [
    /*0*/ui.Label({
      value: AllLabels.PITitle,
      style: optionsTitleStyle
    }),
    /*1*/ui.Label(AllLabels.PIInstr),
    PIselect,
    /*2*/PI_OnOff,
    /*3*/ui.Panel(),//indexChart added here
    /*4*/ui.Panel()
    ],
    style: {margin: '10px 0px 0px 0px', border: borderStyle}
});

//-------------------------------------------------------------------------------------------------------------------------------//
//----------------------------------------------adding all the panels together into one panel------------------------------------//  
//-------------------------------------------------------------------------------------------------------------------------------//
var AllPanels = ui.Panel({
  widgets: [
    /*0*/ IntroPanel,
    /*1*/ ParametersPanel, 
    /*2*/ MapDisplayPanel,
    /*3*/ ExportPanel,
    /*4*/ PIPanel,
    ],
    style: {width: '350px', padding: '8px'}
});

//insert this panel into the root panel(sidebar)
ui.root.insert(0,AllPanels);

//--------------------------------------------------------------map info panel-----------------------------------//
////empty panel called mapinfopanel placed in the bottom left of the map. 
////Holds information about the analysis run after clicking the Add Images to Map button.

var mapinfopanel = ui.Panel({
  style: {position: 'bottom-left'}
});

Map.add(mapinfopanel);